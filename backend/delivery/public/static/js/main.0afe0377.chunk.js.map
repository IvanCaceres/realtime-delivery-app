{"version":3,"sources":["components/ListItems.tsx","store/features/user/userFeatures.tsx","Layouts/AdminLayout.tsx","Layouts/AppLayout.tsx","store/features/order/index.tsx","components/Table.tsx","components/ViewOrders.tsx","pages/AdminDashboard.js","store/features/featured/index.tsx","store/features/product/index.tsx","store/features/category/index.tsx","components/FeaturedItemsForm.tsx","store/features/productOption/index.tsx","components/AddProductForm.tsx","components/CategoryForm.tsx","store/features/referralCode/index.tsx","components/GenerateReferralCodesForm.tsx","components/FeaturedTiles.tsx","store/features/system/index.tsx","store/features/cart/index.tsx","components/ProductCard.tsx","pages/Home.tsx","pages/Cart.tsx","context/echo.tsx","pages/Order.tsx","hooks/useOrderUpdateApi.js","components/EditOrderForm.tsx","components/LoginForm.tsx","components/ProductOptionForm.tsx","components/RegistrationForm.tsx","components/ViewCategories.tsx","components/ViewProducts.tsx","components/ViewProductOptions.tsx","components/ViewFeaturedItems.tsx","components/ViewReferralCodes.tsx","hooks/useEcho.js","App.tsx","serviceWorker.ts","providers/Api.js","store/sagas/login.js","store/sagas/api.js","store/configureStore.js","index.tsx"],"names":["ListItemLink","props","icon","primary","to","renderLink","React","useMemo","forwardRef","itemProps","ref","ListItem","button","component","ListItemIcon","ListItemText","MainListItems","callback","ListSubheader","inset","onClick","userSlice","createSlice","name","initialState","user","reducers","setUser","state","action","payload","login","createAction","logout","actions","useStyles","makeStyles","theme","root","display","toolbar","paddingRight","toolbarIcon","alignItems","justifyContent","padding","mixins","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","menuButtonHidden","title","flexGrow","drawerPaper","position","whiteSpace","drawerPaperClose","overflowX","spacing","breakpoints","up","appBarSpacer","content","height","overflow","container","paddingTop","paddingBottom","paper","flexDirection","fixedHeight","mapDispatchToProps","logoutActionCreator","connect","undefined","getRooms","token","children","classes","history","useHistory","useState","open","setOpen","clsx","className","CssBaseline","AppBar","Toolbar","IconButton","edge","color","aria-label","Typography","variant","noWrap","Drawer","Divider","List","Container","maxWidth","Box","mt","createStyles","cart","Link","admin","Button","Badge","badgeContent","length","slice","adminOrder","order","orders","success","error","adminSubmitSuccess","adminSubmitError","setOrder","setOrders","setAdminOrder","clearOrderUpdateOutcome","clearSubmitAdminOrderEditOutcome","setSubmitAdminOrderEditOutcome","errors","setOrderUpdateOutcome","reducer","clearOrderUpdateOutcomeAction","setOrderAction","setOrdersAction","setAdminOrderAction","clearSubmitAdminOrderEditOutcomeAction","setSubmitAdminOrderEditOutcomeAction","getOrderAction","getAdminOrdersAction","submitAdminOrderEditFormAction","noResults","seeMore","marginTop","Orders","count","columns","data","rowsPerPage","apiResultSet","onChangeRowsPerPage","onChangePage","page","tableElements","headers","rows","map","columnConfig","TableCell","key","header","row","index","TableRow","id","colData","renderFn","mome","moment","format","m","itemCount","Fragment","TableContainer","Paper","Table","size","TableHead","TableBody","TableFooter","TablePagination","rowsPerPageOptions","SelectProps","inputProps","native","textAlign","marginBottom","mapDispatch","getOrders","per_page","queryParams","useEffect","tableRender","rowData","RouterLink","order_status","username","placed","Dashboard","featured","featuredItems","submitSuccess","submitError","setFeatured","setFeaturedItems","clearSubmitOutcome","setSubmitOutcome","setSubmitFeaturedOutcomeAction","clearSubmitFeaturedOutcomeAction","setFeaturedAction","setFeaturedItemsAction","getFeaturedAction","submitFeaturedAction","product","products","setProduct","setProducts","setSubmitProductOutcomeAction","clearSubmitProductOutcomeAction","setProductAction","setProductsAction","getProductAction","submitProductAction","categorySlice","category","categories","submitCategoryFormSuccess","submitCategoryFormError","setCategories","setCategory","setSubmitCategoryFormOutcome","categoryReducer","clearSubmitOutcomeAction","setCategoryAction","setCategoriesAction","getCategoryAction","submitCategoryFormAction","imgUploader","borderRadius","border","palette","divider","boxShadow","submit","margin","getFeatured","submitForm","getProduct","getCategory","useParams","formErrorsState","featuredTitle","categorySelected","setCategorySelected","defaultImage","setDefaultImage","featuredId","setFeaturedId","featuredImage","setFeaturedImage","featuredImageChanged","setFeaturedImageChanged","setFeaturedTitle","formErrors","setFormErrors","labelWidth","setLabelWidth","loading","setLoading","productSelected","setProductSelected","remountKey","setRemountKey","inputLabel","current","offsetWidth","image","featurable_type","featurable_id","Date","now","push","categoryOptions","productSelectOptions","useRef","MenuItem","value","onSubmit","e","event","preventDefault","form","category_id","product_id","handleSubmit","TextField","required","fullWidth","label","autoComplete","onChange","target","FormHelperText","FormControl","withIcon","singleImage","buttonStyles","imageUploaderButtonStyles","withLabel","withPreview","buttonText","files","imgExtension","maxFileSize","defaultImages","my","InputLabel","htmlFor","Select","labelId","type","CircularProgress","mb","Alert","severity","productOption","productOptions","setProductOption","setProductOptions","setSubmitProductOptionOutcomeAction","clearSubmitProductOptionOutcomeAction","setProductOptionAction","setProductOptionsAction","getProductOptionAction","submitProductOptionAction","getProductOption","productName","productImage","setProductImage","productId","setProductId","productImageChanged","setProductImageChanged","productCategories","setProductCategories","selectedProductOptions","setSelectedProductOptions","setProductName","categoryIds","options","optionIds","option","productOptionOptions","categoryModel","productOptionModel","product_option_id","multiple","submitCategoryForm","categoryName","categoryId","setCategoryId","setCategoryName","formData","referralCodes","setReferralCodes","setSubmitReferralCodeFormOutcomeAction","clearSubmitReferralCodeFormOutcomeAction","setReferralCodesAction","getReferralCodeAction","submitReferralCodeFormAction","referralCode","quantity","setQuantity","quantityOptions","parseInt","flexWrap","minWidth","down","opacity","focusVisible","imageButton","left","right","top","bottom","common","white","imageSrc","backgroundSize","backgroundPosition","imageBackdrop","backgroundColor","black","imageTitle","imageMarked","ButtonBases","featuredItem","ButtonBase","focusRipple","focusVisibleClassName","style","backgroundImage","systemSlice","echo","registerSubmitSuccess","registerSubmitError","setEcho","clearRegisterSubmitOutcome","setRegisterSubmitOutcome","setRegisterSubmitOutcomeAction","clearRegisterSubmitOutcomeAction","setHomeFeaturedAction","setHomeProductsAction","systemReducer","submitRegisterFormAction","getHomeContentAction","addCartItem","clearCart","removeFromCart","filter","item","clearSubmitOrderOutcomeAction","setSubmitOrderOutcomeAction","submitOrderAction","media","bullet","transform","fontSize","pos","price","addToCart","manufacturer","onOptionSelected","cartButton","infoString","customOrderMessage","optionSelected","setOptionSelected","setCustomOrderMessage","productOptionsRender","inCart","find","cartItem","optionSelectedUpdated","custom","Card","CardMedia","CardContent","CardActions","getHomeContent","system","productCards","Grid","xs","sm","md","lg","submitOrder","userLocation","setUserLocation","orderItems","setOrderItems","formValidationErrors","setFormValidationErrors","getLocation","items","cartProduct","newOptions","selected_option","custom_message","orderItemsRender","imgStyle","markerStyle","Marker","src","alt","productOptionSelectedUpdated","orderItem","optionUpdate","navigator","geolocation","getCurrentPosition","crd","coords","lat","latitude","lng","longitude","alert","bootstrapURLKeys","center","zoom","formValidationError","validationErrors","validate","console","log","option_data","location","defaultState","EchoContext","createContext","orderStatus","textTransform","orderConfirmed","green","getOrder","channelCallback","orderUpdate","useContext","channel","listen","useOrderUpdateApi","orderUpdateObj","delivery_time","Object","values","option_selected","defaultLocation","mapStyles","status","setOrderId","statusSelected","setStatusSelected","deliveryDate","setDeliveryDate","statusOptions","toISOString","phone","utils","MomentUtils","TimePicker","autoOk","inputVariant","InputProps","endAdornment","InputAdornment","avatar","secondary","main","pageIconWrap","loginActionCreator","password","setPassword","setUsername","Avatar","loginData","optionName","optionId","setOptionId","setOptionName","confirmPassword","phoneNumber","setConfirmPassword","setPhoneNumber","setReferralCode","password_confirmation","referral_code","defaultCountry","disableDropdown","countryCodeEditable","setPage","setRowsPerPage","setQueryParams","total","newPage","getProducts","getProductOptions","getFeaturedItems","getReferralCodes","useEcho","csrf","document","cookie","split","some","includes","decodeURIComponent","echoInstance","Echo","broadcaster","cluster","forceTLS","auth","disconnect","adminRoutes","path","exact","ViewFeaturedItems","GenerateReferralCodesForm","Provider","AppLayout","Boolean","window","hostname","match","axios","method","url","submitRegisterForm","params","submitProductOptionForm","submitFeaturedForm","FormData","set","entries","val","submitProductForm","keyName","join","append","getReferralCode","submitReferralCodeForm","getAdminOrders","submitAdminOrderEdit","authorize","logoutSaga","submitRegisterFormSaga","watchSubmitRegisterForm","watchLogin","watchLogout","call","authResp","put","cancelled","localStorage","removeItem","response","message","fieldErrors","takeEvery","toString","getHomeContentSaga","getCategorySaga","submitCategoryFormSaga","getProductOptionSaga","submitProductOptionSaga","getFeaturedSaga","submitFeaturedSaga","getProductSaga","submitProductSaga","getReferralCodeSaga","submitReferralCodeFormSaga","getOrdersAdminSaga","getOrderSaga","submitAdminOrderEditSaga","submitOrderSaga","watchGetHomeContent","watchGetCategory","watchGetFeatured","watchGetProduct","watchGetProductOption","watchGetReferralCode","watchGetOrder","watchGetOrdersAdmin","watchSubmitAdminOrderEdit","watchSubmitOrder","watchSubmitReferralCodeForm","watchSubmitCategoryForm","watchSubmitFeaturedForm","watchSubmitProductForm","watchSubmitProductOptionForm","res","rootSaga","combineReducers","userReducer","featuredReducer","productReducer","productOptionReducer","referralCodeReducer","cartReducer","orderReducer","fork","watchLoginSaga","sagaMiddleware","createSagaMiddleware","middleware","getDefaultMiddleware","store","configureStore","devTools","process","run","ReactDOM","render","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0afe0377.chunk.js","sourcesContent":["import React from 'react';\r\nimport AddToPhotosIcon from '@material-ui/icons/AddToPhotos';\r\nimport CategoryIcon from '@material-ui/icons/Category';\r\nimport ConfirmationNumberIcon from '@material-ui/icons/ConfirmationNumber';\r\nimport DashboardIcon from '@material-ui/icons/Dashboard';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport FeaturedVideoIcon from '@material-ui/icons/FeaturedVideo';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport PostAddIcon from '@material-ui/icons/PostAdd';\r\nimport { Link as RouterLink, LinkProps as RouterLinkProps } from 'react-router-dom';\r\n\r\ninterface ListItemLinkProps {\r\n    icon?: React.ReactElement;\r\n    primary: string;\r\n    to: string;\r\n}\r\n\r\nfunction ListItemLink(props: ListItemLinkProps) {\r\n    const { icon, primary, to } = props;\r\n\r\n    const renderLink = React.useMemo(\r\n        () =>\r\n            React.forwardRef<any, Omit<RouterLinkProps, 'to'>>((itemProps, ref) => (\r\n                <RouterLink to={to} ref={ref} {...itemProps} />\r\n            )),\r\n        [to],\r\n    );\r\n\r\n    return (\r\n        <li>\r\n            <ListItem button component={renderLink}>\r\n                {icon ? <ListItemIcon>{icon}</ListItemIcon> : null}\r\n                <ListItemText primary={primary} />\r\n            </ListItem>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport const MainListItems = ({ callback }: { callback: any; }) => {\r\n    return (\r\n        <div>\r\n            <ListItemLink to=\"/\" primary=\"Home\" icon={<HomeIcon />} />\r\n            <ListItemLink to=\"/admin\" primary=\"Dashboard\" icon={<DashboardIcon />} />\r\n            <ListSubheader inset>Featured Items</ListSubheader>\r\n            <ListItemLink to=\"/admin/featured\" primary=\"Add\" icon={<FeaturedVideoIcon />} />\r\n            <ListItemLink to=\"/admin/featured/view\" primary=\"View All\" icon={<FeaturedVideoIcon />} />\r\n            <ListSubheader inset>Categories</ListSubheader>\r\n            <ListItemLink to=\"/admin/category\" primary=\"Add\" icon={<CategoryIcon />} />\r\n            <ListItemLink to=\"/admin/category/view\" primary=\"View All\" icon={<CategoryIcon />} />\r\n            <ListSubheader inset>Products</ListSubheader>\r\n            <ListItemLink to=\"/admin/product\" primary=\"Add Product\" icon={<PostAddIcon />} />\r\n            <ListItemLink to=\"/admin/product/view\" primary=\"View Products\" icon={<PostAddIcon />} />\r\n            <ListSubheader inset>Product Options</ListSubheader>\r\n            <ListItemLink to=\"/admin/productOption\" primary=\"Add\" icon={<AddToPhotosIcon />} />\r\n            <ListItemLink to=\"/admin/productOption/view\" primary=\"View All\" icon={<AddToPhotosIcon />} />\r\n            <ListSubheader inset>Referral Codes</ListSubheader>\r\n            <ListItemLink to=\"/admin/referral\" primary=\"Generate\" icon={<ConfirmationNumberIcon />} />\r\n            <ListItemLink to=\"/admin/referral/view\" primary=\"View All\" icon={<ConfirmationNumberIcon />} />\r\n\r\n            {/* <ListItemLink to=\"/admin/conferences\" primary=\"All Conferences\" icon={<CalendarTodayIcon />} /> */}\r\n            {/* <ListItemLink to=\"/admin/rooms\" primary=\"Rooms\" icon={<MeetingRoomIcon />} /> */}\r\n            {/* <ListItemLink to=\"/admin/users\" primary=\"Users\" icon={<PeopleIcon />} /> */}\r\n            <ListItem button onClick={() => callback()}>\r\n                <ListItemIcon><ExitToAppIcon /></ListItemIcon>\r\n                <ListItemText primary={\"Logout\"} />\r\n            </ListItem>\r\n        </div>\r\n    )\r\n};\r\n","import { createSlice, createAction } from '@reduxjs/toolkit'\r\n\r\nconst userSlice = createSlice({\r\n    name: 'user',\r\n    initialState: {\r\n        user: null\r\n    },\r\n    reducers: {\r\n        setUser(state, action) {\r\n            state.user = action.payload\r\n        }\r\n    }\r\n})\r\n\r\nexport const login = createAction<any>('user/login')\r\nexport const logout = createAction<any>('user/logout')\r\n\r\nexport const { setUser } = userSlice.actions\r\n\r\nexport default userSlice.reducer","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Box from '@material-ui/core/Box';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Link from '@material-ui/core/Link';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport { MainListItems } from '../components/ListItems';\r\n// import { getRooms } from './../store/features/rooms/roomsSlice'\r\nimport { connect } from 'react-redux';\r\nimport { logout as logoutActionCreator } from './../store/features/user/userFeatures'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    toolbar: {\r\n        paddingRight: 24, // keep right padding when drawer closed\r\n    },\r\n    toolbarIcon: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: '0 8px',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n        display: 'none',\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n        position: 'relative',\r\n        whiteSpace: 'nowrap',\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerPaperClose: {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9),\r\n        },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    content: {\r\n        flexGrow: 1,\r\n        height: '100vh',\r\n        overflow: 'auto',\r\n        padding: '20px'\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(4),\r\n        paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        overflow: 'auto',\r\n        flexDirection: 'column',\r\n    },\r\n    fixedHeight: {\r\n        height: 240,\r\n    },\r\n}));\r\n\r\nfunction AdminLayout({ getRooms, token, children, logout }: any) {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const [open, setOpen] = React.useState(true);\r\n    const handleDrawerOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleDrawerClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n\r\n    const handleLogout = () => {\r\n        logout({ token, history })\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <AppBar position=\"absolute\" className={clsx(classes.appBar, open && classes.appBarShift)}>\r\n                <Toolbar className={classes.toolbar}>\r\n                    <IconButton\r\n                        edge=\"start\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        className={clsx(classes.menuButton, open && classes.menuButtonHidden)}\r\n                    >\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap className={classes.title}>\r\n                        Admin\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                variant=\"permanent\"\r\n                classes={{\r\n                    paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n                }}\r\n                open={open}\r\n            >\r\n                <div className={classes.toolbarIcon}>\r\n                    <IconButton onClick={handleDrawerClose}>\r\n                        <ChevronLeftIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                <List>\r\n                    <MainListItems callback={handleLogout}></MainListItems>\r\n                </List>\r\n                <Divider />\r\n            </Drawer>\r\n            <main className={classes.content}>\r\n                <div className={classes.appBarSpacer} />\r\n                <Container maxWidth=\"lg\" className={classes.container}>\r\n                    {children}\r\n                </Container>\r\n                <Box mt={8}>\r\n                </Box>\r\n            </main>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = { logout: logoutActionCreator }\r\n\r\nexport default connect(\r\n    undefined,\r\n    mapDispatchToProps\r\n)(AdminLayout)","import React from 'react';\r\nimport { connect } from 'react-redux'\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport Button from '@material-ui/core/Button';\r\nimport Container from '@material-ui/core/Container';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { Link } from 'react-router-dom';\r\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        appBarSpacer: theme.mixins.toolbar,\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        cart: {\r\n            marginLeft: 'auto'\r\n        },\r\n        title: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nfunction ButtonAppBar({ children, cart, user }: any) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"home\" component={Link} to=\"/\">\r\n                        <HomeIcon />\r\n                    </IconButton>\r\n                    {\r\n                        user && user.admin ?\r\n                            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" component={Link} to=\"/admin\">\r\n                                <SupervisorAccountIcon />\r\n                            </IconButton>\r\n                            : null\r\n                    }\r\n                    {!user ? <Button color=\"inherit\" component={Link} to=\"/login\">Login</Button> : null}\r\n                    {(user && user.admin || !user) ? <Button color=\"inherit\" component={Link} to=\"/register\">Register</Button> : null}\r\n                    {user ? <Button color=\"inherit\" component={Link} to=\"/login\">Logout</Button> : null}\r\n                    {user ? <Button color=\"inherit\" component={Link} to=\"/trackOrder\">Track Order</Button> : null}\r\n                    <IconButton edge=\"end\" className={classes.cart} color=\"inherit\" aria-label=\"cart\" component={Link} to=\"/cart\">\r\n                        <Badge badgeContent={cart.length} color=\"secondary\">\r\n                            <ShoppingCartIcon />\r\n                        </Badge>\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <main>\r\n                <div className={classes.appBarSpacer} />\r\n                <Container maxWidth=\"lg\">\r\n                    {children}\r\n                </Container>\r\n            </main>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n    return {\r\n        user: state.user.user,\r\n        cart: state.cart.cart,\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n)(ButtonAppBar)","import { createSlice, createAction } from '@reduxjs/toolkit'\r\n\r\nconst slice = createSlice({\r\n    name: 'order',\r\n    initialState: {\r\n        adminOrder: null,\r\n        order: null,\r\n        orders: null,\r\n        success: null,\r\n        error: null,\r\n        adminSubmitSuccess: null,\r\n        adminSubmitError: null\r\n    },\r\n    reducers: {\r\n        setOrder(state, action) {\r\n            state.order = action.payload\r\n        },\r\n        setOrders(state, action) {\r\n            state.orders = action.payload\r\n        },\r\n        setAdminOrder(state, action) {\r\n            state.adminOrder = action.payload\r\n        },\r\n        clearOrderUpdateOutcome(state) {\r\n            state.success = null\r\n            state.error = null\r\n        },\r\n        clearSubmitAdminOrderEditOutcome(state) {\r\n            state.adminSubmitSuccess = null\r\n            state.adminSubmitError = null\r\n        },\r\n        setSubmitAdminOrderEditOutcome(state, action) {\r\n            const { success, errors } = action.payload\r\n            if (success) {\r\n                state.adminSubmitSuccess = success\r\n            } else {\r\n                state.adminSubmitSuccess = null\r\n            }\r\n\r\n            if (errors) {\r\n                state.adminSubmitError = errors\r\n            } else {\r\n                state.adminSubmitError = null\r\n            }\r\n        },\r\n        setOrderUpdateOutcome(state, action) {\r\n            const { success, errors } = action.payload\r\n            if (success) {\r\n                state.success = success\r\n            } else {\r\n                state.success = null\r\n            }\r\n\r\n            if (errors) {\r\n                state.error = errors\r\n            } else {\r\n                state.error = null\r\n            }\r\n        },\r\n\r\n    }\r\n})\r\n\r\nexport const reducer = slice.reducer\r\nexport const {\r\n    setOrderUpdateOutcome: setOrderUpdateOutcomeAction,\r\n    clearOrderUpdateOutcome: clearOrderUpdateOutcomeAction,\r\n    setOrder: setOrderAction,\r\n    setOrders: setOrdersAction,\r\n    setAdminOrder: setAdminOrderAction,\r\n    clearSubmitAdminOrderEditOutcome: clearSubmitAdminOrderEditOutcomeAction,\r\n    setSubmitAdminOrderEditOutcome: setSubmitAdminOrderEditOutcomeAction\r\n} = slice.actions\r\n\r\nexport const getOrderAction = createAction<any>('order/get')\r\nexport const getAdminOrdersAction = createAction<any>('order/getAdmin')\r\nexport const submitAdminOrderEditFormAction = createAction<any>('order/admin/edit')","import React from 'react';\r\nimport Link from '@material-ui/core/Link';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport moment from 'moment'\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    noResults: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    seeMore: {\r\n        marginTop: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nexport default function Orders({\r\n    count,\r\n    title = '',\r\n    columns = [],\r\n    data = [],\r\n    apiResultSet,\r\n    rowsPerPage,\r\n    onChangeRowsPerPage,\r\n    onChangePage,\r\n    page = 0\r\n}: {\r\n    count?: number;\r\n    title?: string;\r\n    columns: any[];\r\n    data: any[];\r\n    apiResultSet?: any;\r\n    onChangeRowsPerPage?: any;\r\n    rowsPerPage?: number;\r\n    onChangePage?: any;\r\n    page?: number;\r\n}) {\r\n    const classes = useStyles();\r\n\r\n    // function handleChangeRowsPerPage(per_page) {\r\n    //     if (onChangeRowsPerPage) {\r\n    //         onChangeRowsPerPage()\r\n    //     }\r\n    // }\r\n\r\n    let tableElements: {\r\n        headers: any[],\r\n        rows: any[]\r\n    } = {\r\n        headers: [],\r\n        rows: []\r\n    }\r\n\r\n    tableElements.headers = columns.map((columnConfig) => {\r\n        return (<TableCell key={columnConfig.key}>{columnConfig.header}</TableCell>)\r\n    })\r\n\r\n    tableElements.rows = data.map((row, index) => {\r\n        let target = index === 0 ? tableElements.headers : tableElements.rows\r\n        return (<TableRow key={row.id || row.user.id}>\r\n            {columns.map((columnConfig) => {\r\n                let colData = row[columnConfig.key]\r\n\r\n                if (columnConfig.renderFn) {\r\n                    return (<TableCell key={columnConfig.key}>{columnConfig.renderFn(row)}</TableCell>)\r\n                }\r\n\r\n                // moment format if start or end time\r\n                if (columnConfig.key === 'start' || columnConfig.key === 'end') {\r\n                    let mome = moment(colData)\r\n                    return (<TableCell key={columnConfig.key}>{mome.format(\"dddd, MMMM Do YYYY, h:mm:ss a\")}</TableCell>)\r\n                }\r\n                return (<TableCell key={columnConfig.key}>{colData}</TableCell>)\r\n            })}\r\n        </TableRow>)\r\n    })\r\n\r\n    let noResults = null\r\n    if (data.length === 0) {\r\n        noResults = (\r\n            <Box m={4} className={classes.noResults}>\r\n                <Typography variant={\"caption\"}>No Results</Typography>\r\n            </Box>\r\n        )\r\n    }\r\n\r\n    let itemCount = data.length\r\n\r\n    let paginationProps = {}\r\n\r\n    // if we have a count prop\r\n    if (count !== undefined) {\r\n        itemCount = count\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableContainer component={Paper}>\r\n                <Table size=\"small\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            {tableElements.headers}\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {tableElements.rows}\r\n                    </TableBody>\r\n\r\n                    <TableFooter>\r\n                        <TableRow>\r\n                            {/* enable pagination with api result set */}\r\n                            {rowsPerPage && (\r\n\r\n                                <TablePagination\r\n                                    rowsPerPageOptions={[5, 10, 15, 25]}\r\n                                    // colSpan={3}\r\n                                    count={itemCount}\r\n                                    rowsPerPage={rowsPerPage}\r\n                                    page={page}\r\n                                    SelectProps={{\r\n                                        inputProps: { 'aria-label': 'rows per page' },\r\n                                        native: true,\r\n                                    }}\r\n                                    onChangePage={onChangePage}\r\n                                    onChangeRowsPerPage={onChangeRowsPerPage}\r\n                                // ActionsComponent={TablePaginationActions}\r\n                                />\r\n                            )}\r\n                        </TableRow>\r\n                    </TableFooter>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n\r\n            {noResults}\r\n\r\n            {/* <div className={classes.seeMore}>\r\n                <Link color=\"primary\" href=\"#\" onClick={preventDefault}>\r\n                    See more orders\r\n        </Link>\r\n            </div> */}\r\n        </React.Fragment>\r\n    );\r\n}","import React, { useEffect, useState } from \"react\"\r\nimport { connect } from 'react-redux'\r\nimport { getAdminOrdersAction } from './../store/features/order'\r\nimport Link from '@material-ui/core/Link';\r\nimport Table from '../components/Table';\r\nimport Container from '@material-ui/core/Container'\r\nimport { useParams, Link as RouterLink } from 'react-router-dom';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport moment from 'moment'\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        textAlign: 'center'\r\n    },\r\n    title: {\r\n        marginBottom: theme.spacing(3)\r\n    }\r\n}))\r\n\r\nfunction ViewOrders({ getOrders, orders }: any) {\r\n    let classes = useStyles()\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(15);\r\n    const [queryParams, setQueryParams] = useState<any>({\r\n        per_page: rowsPerPage,\r\n        page: 1\r\n    });\r\n\r\n    useEffect(() => {\r\n        getOrders({ queryParams })\r\n    }, [queryParams])\r\n\r\n    function handleRowsPerPageChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n        setRowsPerPage(parseInt(event.target.value))\r\n        setQueryParams({\r\n            ...queryParams,\r\n            page: 1,\r\n            per_page: parseInt(event.target.value)\r\n        })\r\n        setPage(0)\r\n    }\r\n\r\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n        // 0 based page index\r\n        setPage(newPage);\r\n        setQueryParams({\r\n            ...queryParams,\r\n            page: newPage + 1\r\n        })\r\n    };\r\n\r\n    let columns: any[] = [\r\n        {\r\n            key: 'id',\r\n            header: 'Order Id',\r\n            renderFn: (rowData: any) => {\r\n                return (\r\n                    <Link component={RouterLink} to={`/admin/order/edit/${rowData.id}`}>{rowData.id}</Link>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            key: 'order_status',\r\n            header: 'Status',\r\n            renderFn: (rowData: any) => {\r\n                return (\r\n                    <Link component={RouterLink} to={`/admin/order/edit/${rowData.id}`}>{rowData.order_status}</Link>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            key: 'username',\r\n            header: 'Username',\r\n            renderFn: (rowData: any) => {\r\n                return (\r\n                    <Link component={RouterLink} to={`/admin/order/edit/${rowData.id}`}>{rowData.user.username}</Link>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            key: 'placed',\r\n            header: 'Placed',\r\n            renderFn: (rowData: any) => {\r\n                return (\r\n                    <Link component={RouterLink} to={`/admin/order/edit/${rowData.id}`}>{moment(rowData.placed).format('MM-DD-YYYY h:mm a')}</Link>\r\n                )\r\n            }\r\n        }\r\n    ]\r\n\r\n    let tableRender\r\n    if (orders) {\r\n        tableRender = <Table columns={columns} data={orders} />\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"lg\" className={classes.root}>\r\n            <Typography component=\"h1\" variant=\"h3\" className={classes.title}>View Orders</Typography>\r\n            {tableRender}\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n    return {\r\n        orders: state.order.orders\r\n    }\r\n}\r\n\r\nconst mapDispatch = {\r\n    getOrders: getAdminOrdersAction\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatch\r\n)(ViewOrders)","import React from 'react';\r\n// import Timeline from '../components/Timeline'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ViewOrders from '../components/ViewOrders';\r\n\r\nexport default function Dashboard() {\r\n    return (\r\n        <>\r\n            <Typography variant=\"h4\" color=\"inherit\" noWrap>\r\n                Dashboard\r\n            </Typography>\r\n            <ViewOrders />\r\n            {/* <Timeline /> */}\r\n        </>\r\n    );\r\n}","import { createSlice, createAction } from '@reduxjs/toolkit'\r\n\r\nconst slice = createSlice({\r\n    name: 'featured',\r\n    initialState: {\r\n        featured: null,\r\n        featuredItems: null,\r\n        submitSuccess: null,\r\n        submitError: null,\r\n    },\r\n    reducers: {\r\n        setFeatured(state, action) {\r\n            state.featured = action.payload\r\n        },\r\n        setFeaturedItems(state, action) {\r\n            state.featuredItems = action.payload\r\n        },\r\n        clearSubmitOutcome(state) {\r\n            state.submitSuccess = null\r\n            state.submitError = null\r\n        },\r\n        setSubmitOutcome(state, action) {\r\n            const { success, errors } = action.payload\r\n            if (success) {\r\n                state.submitSuccess = success\r\n            } else {\r\n                state.submitSuccess = null\r\n            }\r\n\r\n            if (errors) {\r\n                state.submitError = errors\r\n            } else {\r\n                state.submitError = null\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const reducer = slice.reducer\r\nexport const { setSubmitOutcome: setSubmitFeaturedOutcomeAction, clearSubmitOutcome: clearSubmitFeaturedOutcomeAction, setFeatured: setFeaturedAction, setFeaturedItems: setFeaturedItemsAction } = slice.actions\r\nexport const getFeaturedAction = createAction<any>('featured/get')\r\nexport const submitFeaturedAction = createAction<any>('featured/submitForm')","import { createSlice, createAction } from '@reduxjs/toolkit'\r\n\r\nconst slice = createSlice({\r\n    name: 'product',\r\n    initialState: {\r\n        product: null,\r\n        products: null,\r\n        submitSuccess: null,\r\n        submitError: null,\r\n    },\r\n    reducers: {\r\n        setProduct(state, action) {\r\n            state.product = action.payload\r\n        },\r\n        setProducts(state, action) {\r\n            state.products = action.payload\r\n        },\r\n        clearSubmitOutcome(state) {\r\n            state.submitSuccess = null\r\n            state.submitError = null\r\n        },\r\n        setSubmitOutcome(state, action) {\r\n            const { success, errors } = action.payload\r\n            if (success) {\r\n                state.submitSuccess = success\r\n            } else {\r\n                state.submitSuccess = null\r\n            }\r\n\r\n            if (errors) {\r\n                state.submitError = errors\r\n            } else {\r\n                state.submitError = null\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const reducer = slice.reducer\r\nexport const { setSubmitOutcome: setSubmitProductOutcomeAction, clearSubmitOutcome: clearSubmitProductOutcomeAction, setProduct: setProductAction, setProducts: setProductsAction } = slice.actions\r\nexport const getProductAction = createAction<any>('product/get')\r\nexport const submitProductAction = createAction<any>('product/submitForm')","import { createSlice, createAction } from '@reduxjs/toolkit'\r\n\r\nconst categorySlice = createSlice({\r\n    name: 'category',\r\n    initialState: {\r\n        category: null,\r\n        categories: null,\r\n        submitCategoryFormSuccess: null,\r\n        submitCategoryFormError: null,\r\n    },\r\n    reducers: {\r\n        setCategories(state, action) {\r\n            state.categories = action.payload\r\n        },\r\n        setCategory(state, action) {\r\n            state.category = action.payload\r\n        },\r\n        clearSubmitOutcome(state) {\r\n            state.submitCategoryFormSuccess = null\r\n            state.submitCategoryFormError = null\r\n        },\r\n        setSubmitCategoryFormOutcome(state, action) {\r\n            const { success, errors } = action.payload\r\n            if (success) {\r\n                state.submitCategoryFormSuccess = success\r\n            } else {\r\n                state.submitCategoryFormSuccess = null\r\n            }\r\n\r\n            if (errors) {\r\n                state.submitCategoryFormError = errors\r\n            } else {\r\n                state.submitCategoryFormError = null\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const categoryReducer = categorySlice.reducer\r\nexport const { setSubmitCategoryFormOutcome, clearSubmitOutcome: clearSubmitOutcomeAction, setCategory: setCategoryAction, setCategories: setCategoriesAction } = categorySlice.actions\r\nexport const getCategoryAction = createAction<any>('category/get')\r\nexport const submitCategoryFormAction = createAction<any>('category/submitForm')","import React from \"react\"\r\nimport { connect } from 'react-redux'\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\n// material ui components\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Container from '@material-ui/core/Container'\r\nimport Divider from '@material-ui/core/Divider';\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport ImageUploader from '@ivancaceres/react-images-upload'\r\n\r\nimport { clearSubmitFeaturedOutcomeAction, getFeaturedAction, setFeaturedAction, submitFeaturedAction } from './../store/features/featured'\r\nimport { getProductAction } from './../store/features/product'\r\nimport { getCategoryAction } from './../store/features/category'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        textAlign: 'center'\r\n    },\r\n    imgUploader: {\r\n        '& .fileContainer': {\r\n            marginTop: 0,\r\n            marginBottom: 0,\r\n            borderRadius: 4,\r\n            border: `solid 1px ${theme.palette.divider}`,\r\n            boxShadow: 'none'\r\n        },\r\n        '& .uploadPictureContainer': {\r\n            width: '100%'\r\n        },\r\n        '& .uploadPictureContainer:not(:last-of-type)': {\r\n            display: 'none'\r\n        }\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\ninterface formErrors {\r\n    featuredTitle: string | null,\r\n    category: string | null,\r\n    product: string | null\r\n}\r\n\r\ninterface formPayload {\r\n    title: string,\r\n    category_id?: string,\r\n    product_id?: string,\r\n    image?: File | null,\r\n    id?: string,\r\n}\r\n\r\nfunction FeaturedItemForm({ categories, clearSubmitOutcome, errors, featured, getCategory, getFeatured, getProduct, products, setFeatured, submitForm, success }: any) {\r\n    const classes = useStyles()\r\n    let { id } = useParams()\r\n    let history = useHistory()\r\n\r\n    let formErrorsState = {\r\n        featuredTitle: null,\r\n        category: null,\r\n        product: null\r\n    }\r\n\r\n    // component state\r\n    const [categorySelected, setCategorySelected] = React.useState<string>('')\r\n    const [defaultImage, setDefaultImage] = React.useState<string[] | undefined>(undefined)\r\n    const [featuredId, setFeaturedId] = React.useState<string | undefined>(undefined)\r\n    const [featuredImage, setFeaturedImage] = React.useState<File | null>(null)\r\n    const [featuredImageChanged, setFeaturedImageChanged] = React.useState<boolean>(false)\r\n    const [featuredTitle, setFeaturedTitle] = React.useState<string>('')\r\n    const [formErrors, setFormErrors] = React.useState<formErrors>(formErrorsState)\r\n    const [labelWidth, setLabelWidth] = React.useState(0);\r\n    // form submission loading\r\n    const [loading, setLoading] = React.useState<boolean>(false)\r\n    const [productSelected, setProductSelected] = React.useState<string>('')\r\n    const [remountKey, setRemountKey] = React.useState<string>('normal')\r\n\r\n    // effects\r\n    // set initial select label width\r\n    React.useEffect(() => {\r\n        setLabelWidth(inputLabel.current!.offsetWidth);\r\n    }, []);\r\n\r\n    // fetch categories and products\r\n    React.useEffect(() => {\r\n        let queryParams = {\r\n            per_page: 200\r\n        }\r\n        getCategory({ queryParams })\r\n        getProduct({ queryParams })\r\n    }, [])\r\n\r\n    // on unmount clear fetched featured data model\r\n    React.useEffect(() => {\r\n        return () => {\r\n            // clear redux store product data\r\n            setFeatured(null)\r\n            clearSubmitOutcome()\r\n        }\r\n    }, [])\r\n\r\n    // id effect\r\n    React.useEffect(() => {\r\n        // fetch product if we don't have it\r\n        if (id) {\r\n            setFeaturedId(id)\r\n            if (!featured) {\r\n                getFeatured({ id })\r\n            }\r\n        }\r\n        if (!id) {\r\n            setFeaturedId(undefined)\r\n            // clear store product data\r\n            setFeatured(null)\r\n            clearSubmitOutcome()\r\n        }\r\n    }, [id])\r\n\r\n    // featured data model effect\r\n    React.useEffect(() => {\r\n        if (featured) {\r\n            setFeaturedTitle(featured.title)\r\n            setFeaturedId(featured.id)\r\n            //setup featured image\r\n            if (featured.image) {\r\n                setDefaultImage([`/storage/${featured.image}`])\r\n            }\r\n\r\n            // set selected category or product\r\n            if (featured.featurable_type && featured.featurable_id) {\r\n                if (featured.featurable_type === 'App\\\\Product') {\r\n                    setProductSelected(featured.featurable_id)\r\n                } else if (featured.featurable_type === 'App\\\\Category') {\r\n                    setCategorySelected(featured.featurable_id)\r\n                }\r\n            }\r\n\r\n            if (featured.product) {\r\n            }\r\n        }\r\n        return () => {\r\n            setFeaturedTitle('')\r\n            setFeaturedImage(null)\r\n            setDefaultImage(undefined)\r\n            // must force remount image uploader component to ensure fresh preview\r\n            setRemountKey(`clearImage${Date.now()}`)\r\n            setCategorySelected('')\r\n            setProductSelected('')\r\n            setFeaturedImageChanged(false)\r\n            setFeaturedId(undefined)\r\n            setFormErrors(formErrorsState)\r\n        }\r\n    }, [featured])\r\n\r\n    // clear stale success/error messages when loading a new request\r\n    React.useEffect(() => {\r\n        if (loading) {\r\n            clearSubmitOutcome()\r\n        }\r\n    }, [loading])\r\n\r\n    // turn off loading when a form submission response is received\r\n    React.useEffect(() => {\r\n        if (success && success.id) {\r\n            // if we received a created model id navigate to edit with id\r\n            history.push(`/admin/featured/edit/${success.id}`)\r\n        }\r\n        return () => {\r\n            setLoading(false)\r\n        }\r\n    }, [success, errors])\r\n\r\n    const inputLabel = React.useRef<HTMLLabelElement>(null);\r\n\r\n    function featuredImageChange(files: File[]) {\r\n        setFeaturedImageChanged(true)\r\n        if (files.length > 0) {\r\n            setFeaturedImage(files[0]);\r\n        } else {\r\n            setFeaturedImage(null);\r\n            // remove default image\r\n            setDefaultImage(undefined);\r\n        }\r\n    }\r\n\r\n    function imageUploaderButtonStyles() {\r\n        // hide the choose image button if an image is picked or a default image exists (saved conference image was loaded)\r\n        if (featuredImage || defaultImage) {\r\n            return { 'display': 'none' }\r\n        }\r\n        return\r\n    }\r\n\r\n    function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n        event.preventDefault()\r\n        if (loading) {\r\n            return\r\n        }\r\n        setLoading(true)\r\n        let form: formPayload = {\r\n            title: featuredTitle,\r\n        }\r\n\r\n        if (categorySelected) {\r\n            form.category_id = categorySelected\r\n        } else if (productSelected) {\r\n            form.product_id = productSelected\r\n        }\r\n\r\n        if (featuredId) {\r\n            form.id = featuredId\r\n        }\r\n\r\n        if (featuredImageChanged) {\r\n            form.image = featuredImage;\r\n        }\r\n        submitForm(form)\r\n    }\r\n\r\n    let categoryOptions\r\n    if (categories && categories.data) {\r\n        categoryOptions = categories.data.map((category: any) => {\r\n            return <MenuItem key={category.id} value={category.id}>{category.name}</MenuItem>\r\n        })\r\n    }\r\n\r\n    let productSelectOptions\r\n    if (products && products.data) {\r\n        productSelectOptions = products.data.map((product: any) => {\r\n            return <MenuItem key={product.id} value={product.id}>{product.name}</MenuItem>\r\n        })\r\n    }\r\n\r\n    // only one product or category can be linked with a single featured item\r\n    function handleCategoryChange(event: any) {\r\n        setProductSelected('')\r\n        setCategorySelected(event.target.value)\r\n    }\r\n\r\n    function handleProductChange(event: any) {\r\n        setCategorySelected('')\r\n        setProductSelected(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"sm\" className={classes.root}>\r\n            <Typography component=\"h1\" variant=\"h3\">{featuredId ? 'Edit' : 'Create'} Featured Item</Typography>\r\n            <form onSubmit={(e: React.FormEvent<HTMLFormElement>) => handleSubmit(e)}>\r\n                {/* Product Name */}\r\n                <TextField\r\n                    error={!!formErrors['featuredTitle']}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"featuredTitle\"\r\n                    label=\"Featured Title\"\r\n                    name=\"featuredTitle\"\r\n                    autoComplete=\"off\"\r\n                    value={featuredTitle}\r\n                    onChange={(event) => setFeaturedTitle(event.target.value)}\r\n                />\r\n                <FormHelperText>Add a featured title or content name will be used.</FormHelperText>\r\n\r\n                {/* Product Image */}\r\n                <FormControl margin=\"normal\" fullWidth>\r\n                    <ImageUploader\r\n                        key={remountKey}\r\n                        className={classes.imgUploader}\r\n                        withIcon={true}\r\n                        singleImage\r\n                        buttonStyles={imageUploaderButtonStyles()}\r\n                        withLabel\r\n                        withPreview\r\n                        buttonText='Set a featured image'\r\n                        onChange={featuredImageChange}\r\n                        imgExtension={['.jpg', '.jpeg', '.png']}\r\n                        maxFileSize={5242880}\r\n                        defaultImages={defaultImage}\r\n                    />\r\n                </FormControl>\r\n\r\n                <Box my={2}>\r\n                    <Divider />\r\n                </Box>\r\n\r\n                <FormHelperText>You must select either a product or category to feature on the home page.</FormHelperText>\r\n\r\n                {/* Categories */}\r\n                <FormControl required error={!!formErrors['category']} variant=\"outlined\" fullWidth margin=\"normal\">\r\n                    <InputLabel ref={inputLabel} id=\"room-select-label\" htmlFor=\"outlined-age-native-simple\">\r\n                        Categories\r\n                    </InputLabel>\r\n                    <Select\r\n                        required\r\n                        value={categorySelected}\r\n                        onChange={handleCategoryChange}\r\n                        labelId=\"category-select-label\"\r\n                        labelWidth={labelWidth}\r\n                        inputProps={{\r\n                            name: 'category',\r\n                            id: 'outlined-category-native-simple',\r\n                        }}\r\n                    >\r\n                        {categoryOptions}\r\n                    </Select>\r\n                    <FormHelperText>Select a category to appear in the featured section.</FormHelperText>\r\n                </FormControl>\r\n\r\n                {/* Products */}\r\n                <FormControl required error={!!formErrors['product']} variant=\"outlined\" fullWidth margin=\"normal\">\r\n                    <InputLabel id=\"product-select-label\" htmlFor=\"outlined-product-native-simple\">\r\n                        Products\r\n                    </InputLabel>\r\n                    <Select\r\n                        required\r\n                        value={productSelected}\r\n                        onChange={handleProductChange}\r\n                        labelId=\"product-select-label\"\r\n                        labelWidth={labelWidth}\r\n                        inputProps={{\r\n                            name: 'product',\r\n                            id: 'outlined-product-native-simple',\r\n                        }}\r\n                    >\r\n                        {productSelectOptions}\r\n                    </Select>\r\n                    <FormHelperText>Or select a product to appear in the featured section.</FormHelperText>\r\n                </FormControl>\r\n                {/* form submit button */}\r\n                <Button\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.submit}\r\n                >\r\n                    Save\r\n                </Button>\r\n\r\n                {/* loader */}\r\n                {loading && <CircularProgress />}\r\n\r\n                {/* error / success messages */}\r\n                <Box mb={2}>\r\n                    {success ? <Alert variant=\"outlined\" severity=\"success\" children={'Changes saved.'} /> : null}\r\n\r\n                    {\r\n                        errors ? errors.map((e: string, index: number) => (\r\n                            <Box mb={2} key={index}><Alert variant=\"outlined\" severity=\"error\" children={e} /></Box>\r\n                        )) : null\r\n                    }\r\n                </Box>\r\n            </form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n    return {\r\n        categories: state.category.categories,\r\n        products: state.product.products,\r\n        featured: state.featured.featured,\r\n        success: state.featured.submitSuccess,\r\n        errors: state.featured.submitError\r\n    }\r\n}\r\n\r\nconst mapDispatch = {\r\n    setFeatured: setFeaturedAction,\r\n    getFeatured: getFeaturedAction,\r\n    submitForm: submitFeaturedAction,\r\n    getProduct: getProductAction,\r\n    getCategory: getCategoryAction,\r\n    clearSubmitOutcome: clearSubmitFeaturedOutcomeAction\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatch\r\n)(FeaturedItemForm)","import { createSlice, createAction } from '@reduxjs/toolkit'\r\n\r\nconst slice = createSlice({\r\n    name: 'productOption',\r\n    initialState: {\r\n        productOption: null,\r\n        productOptions: [],\r\n        submitSuccess: null,\r\n        submitError: null,\r\n    },\r\n    reducers: {\r\n        setProductOption(state, action) {\r\n            state.productOption = action.payload\r\n        },\r\n        setProductOptions(state, action) {\r\n            state.productOptions = action.payload\r\n        },\r\n        clearSubmitOutcome(state) {\r\n            state.submitSuccess = null\r\n            state.submitError = null\r\n        },\r\n        setSubmitOutcome(state, action) {\r\n            const { success, errors } = action.payload\r\n            if (success) {\r\n                state.submitSuccess = success\r\n            } else {\r\n                state.submitSuccess = null\r\n            }\r\n\r\n            if (errors) {\r\n                state.submitError = errors\r\n            } else {\r\n                state.submitError = null\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const reducer = slice.reducer\r\nexport const { setSubmitOutcome: setSubmitProductOptionOutcomeAction, clearSubmitOutcome: clearSubmitProductOptionOutcomeAction, setProductOption: setProductOptionAction, setProductOptions: setProductOptionsAction } = slice.actions\r\nexport const getProductOptionAction = createAction<any>('productOption/get')\r\nexport const submitProductOptionAction = createAction<any>('productOption/submitForm')","import React from \"react\"\r\nimport { connect } from 'react-redux'\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\n// material ui components\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Container from '@material-ui/core/Container'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport ImageUploader from '@ivancaceres/react-images-upload'\r\n\r\nimport { submitProductAction, getProductAction, setProductAction, clearSubmitProductOutcomeAction } from \"../store/features/product\";\r\nimport { getProductOptionAction } from './../store/features/productOption'\r\nimport { getCategoryAction } from './../store/features/category'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        textAlign: 'center'\r\n    },\r\n    imgUploader: {\r\n        '& .fileContainer': {\r\n            marginTop: 0,\r\n            marginBottom: 0,\r\n            borderRadius: 4,\r\n            border: `solid 1px ${theme.palette.divider}`,\r\n            boxShadow: 'none'\r\n        },\r\n        '& .uploadPictureContainer': {\r\n            width: '100%'\r\n        },\r\n        '& .uploadPictureContainer:not(:last-of-type)': {\r\n            display: 'none'\r\n        }\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\ninterface formErrors {\r\n    productName: string | null,\r\n    category: string | null,\r\n    productOption: string | null\r\n}\r\n\r\ninterface formPayload {\r\n    name: string | null,\r\n    category_id: any[],\r\n    product_option_id: any[]\r\n    image?: File | null,\r\n    id?: string | null\r\n}\r\n\r\nfunction AddProductForm({ product, categories, productOptions, getProductOption, getCategory, submitForm, setProduct, getProduct, clearSubmitOutcome, success, errors }: any) {\r\n    const classes = useStyles()\r\n    let { id } = useParams()\r\n    let history = useHistory()\r\n\r\n    const [labelWidth, setLabelWidth] = React.useState(0);\r\n\r\n\r\n    let formErrorsState = {\r\n        productName: null,\r\n        category: null,\r\n        productOption: null\r\n    }\r\n\r\n    // component state\r\n    const [productImage, setProductImage] = React.useState<File | null>(null)\r\n    const [defaultImage, setDefaultImage] = React.useState<string[] | undefined>(undefined)\r\n    const [productId, setProductId] = React.useState<string | undefined>(undefined)\r\n    const [productImageChanged, setProductImageChanged] = React.useState<boolean>(false)\r\n    const [formErrors, setFormErrors] = React.useState<formErrors>(formErrorsState)\r\n    // form submission loading\r\n    const [loading, setLoading] = React.useState<boolean>(false)\r\n    const [productCategories, setProductCategories] = React.useState<any[]>([])\r\n    const [selectedProductOptions, setSelectedProductOptions] = React.useState<any[]>([])\r\n    const [productName, setProductName] = React.useState<string>('')\r\n    const [remountKey, setRemountKey] = React.useState<string>('normal')\r\n\r\n    // effects\r\n    // set initial select label width\r\n    React.useEffect(() => {\r\n        setLabelWidth(inputLabel.current!.offsetWidth);\r\n    }, []);\r\n\r\n    // fetch categories and options\r\n    React.useEffect(() => {\r\n        let queryParams = {\r\n            per_page: 200\r\n        }\r\n        getCategory({ queryParams })\r\n        getProductOption({ queryParams })\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        return () => {\r\n            // clear redux store product data\r\n            setProduct(null)\r\n            clearSubmitOutcome()\r\n        }\r\n    }, [])\r\n\r\n    // id effect\r\n    React.useEffect(() => {\r\n        // fetch product if we don't have it\r\n        if (id) {\r\n            setProductId(id)\r\n            if (!product) {\r\n                getProduct({ id })\r\n            }\r\n        }\r\n        if (!id) {\r\n            // clear store product data\r\n            setProduct(null)\r\n            clearSubmitOutcome()\r\n        }\r\n    }, [id])\r\n\r\n    // product data model effect\r\n    React.useEffect(() => {\r\n        if (product) {\r\n            setProductName(product.name)\r\n            setProductId(product.id)\r\n            //setup product image\r\n            if (product.image) {\r\n                setDefaultImage([`/storage/${product.image}`])\r\n            }\r\n\r\n            // set selected categories and options\r\n            if (product.categories) {\r\n                let categoryIds = []\r\n                for (const category of product.categories) {\r\n                    categoryIds.push(category.id)\r\n                }\r\n                setProductCategories(categoryIds)\r\n            }\r\n\r\n            if (product.options) {\r\n                let optionIds = []\r\n                for (const option of product.options) {\r\n                    optionIds.push(option.id)\r\n                }\r\n                setSelectedProductOptions(optionIds)\r\n            }\r\n        } else {\r\n            setDefaultImage(undefined)\r\n        }\r\n        return () => {\r\n            setProductName('')\r\n            setProductImage(null)\r\n            setDefaultImage(undefined)\r\n            // must force remount image uploader component to ensure fresh preview\r\n            setRemountKey(`clearImage${Date.now()}`)\r\n            setSelectedProductOptions([])\r\n            setProductCategories([])\r\n            setProductImageChanged(false)\r\n            setProductId(undefined)\r\n            setFormErrors(formErrorsState)\r\n        }\r\n    }, [product])\r\n\r\n    // clear stale success/error messages when loading a new request\r\n    React.useEffect(() => {\r\n        if (loading) {\r\n            clearSubmitOutcome()\r\n        }\r\n    }, [loading])\r\n\r\n    // turn off loading when a form submission response is received\r\n    React.useEffect(() => {\r\n        if (success && success.id) {\r\n            // if we received a created model id navigate to edit with id\r\n            history.push(`/admin/product/edit/${success.id}`)\r\n        }\r\n        return () => {\r\n            setLoading(false)\r\n        }\r\n    }, [success, errors])\r\n\r\n    const inputLabel = React.useRef<HTMLLabelElement>(null);\r\n\r\n    function productImageChange(files: File[]) {\r\n        setProductImageChanged(true)\r\n        if (files.length > 0) {\r\n            setProductImage(files[0]);\r\n        } else {\r\n            setProductImage(null);\r\n            // remove default image\r\n            setDefaultImage(undefined);\r\n        }\r\n    }\r\n\r\n    function productNameChange(event: React.ChangeEvent<{ value: string }>) {\r\n        setProductName(event.target.value)\r\n    }\r\n\r\n    function imageUploaderButtonStyles() {\r\n        // hide the choose image button if an image is picked or a default image exists (saved conference image was loaded)\r\n        if (productImage || defaultImage) {\r\n            return { 'display': 'none' }\r\n        }\r\n        return\r\n    }\r\n\r\n    function handleSubmit(event: any) {\r\n        event.preventDefault()\r\n        if (loading) {\r\n            return\r\n        }\r\n        setLoading(true)\r\n        let form: formPayload = {\r\n            name: productName,\r\n            category_id: productCategories,\r\n            product_option_id: selectedProductOptions\r\n        }\r\n\r\n        if (productId) {\r\n            form.id = productId\r\n        }\r\n\r\n        if (productImageChanged) {\r\n            form.image = productImage;\r\n        }\r\n        submitForm(form)\r\n    }\r\n\r\n    let categoryOptions\r\n    if (categories && categories.data) {\r\n        categoryOptions = categories.data.map((categoryModel: any) => {\r\n            return <MenuItem key={categoryModel.id} value={categoryModel.id}>{categoryModel.name}</MenuItem>\r\n        })\r\n    }\r\n\r\n    let productOptionOptions\r\n    if (productOptions && productOptions.data) {\r\n        productOptionOptions = productOptions.data.map((productOptionModel: any) => {\r\n            return <MenuItem key={productOptionModel.id} value={productOptionModel.id}>{productOptionModel.name}</MenuItem>\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"sm\" className={classes.root}>\r\n            <Typography component=\"h1\" variant=\"h3\">{productId ? 'Edit' : 'Create'} Product</Typography>\r\n            <form onSubmit={(e) => handleSubmit(e)}>\r\n                {/* Product Name */}\r\n                <TextField\r\n                    error={!!formErrors['productName']}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"productName\"\r\n                    label=\"Product Name\"\r\n                    name=\"productName\"\r\n                    autoComplete=\"off\"\r\n                    value={productName}\r\n                    onChange={productNameChange}\r\n                />\r\n                {!productName && <FormHelperText>A product name is required.</FormHelperText>}\r\n\r\n                {/* Product Image */}\r\n                <FormControl margin=\"normal\" fullWidth>\r\n                    <ImageUploader\r\n                        key={remountKey}\r\n                        className={classes.imgUploader}\r\n                        withIcon={true}\r\n                        singleImage\r\n                        buttonStyles={imageUploaderButtonStyles()}\r\n                        withLabel\r\n                        withPreview\r\n                        buttonText='Choose Image'\r\n                        onChange={productImageChange}\r\n                        imgExtension={['.jpg', '.jpeg', '.png']}\r\n                        maxFileSize={5242880}\r\n                        defaultImages={defaultImage}\r\n                    />\r\n                </FormControl>\r\n\r\n                {/* Product Categories */}\r\n                <FormControl required error={!!formErrors['category']} variant=\"outlined\" fullWidth margin=\"normal\">\r\n                    <InputLabel ref={inputLabel} id=\"room-select-label\" htmlFor=\"outlined-age-native-simple\">\r\n                        Product Category\r\n                    </InputLabel>\r\n                    <Select\r\n                        required\r\n                        multiple\r\n                        value={productCategories}\r\n                        onChange={(e: any) => {\r\n                            setProductCategories(e.target.value)\r\n                        }}\r\n                        labelId=\"category-select-label\"\r\n                        labelWidth={labelWidth}\r\n                        inputProps={{\r\n                            name: 'category',\r\n                            id: 'outlined-category-native-simple',\r\n                        }}\r\n                    >\r\n                        {categoryOptions}\r\n                    </Select>\r\n                    <FormHelperText>Category must be selected.</FormHelperText>\r\n                </FormControl>\r\n\r\n                {/* Product Options */}\r\n                <FormControl required error={!!formErrors['productOption']} variant=\"outlined\" fullWidth margin=\"normal\">\r\n                    <InputLabel ref={inputLabel} id=\"productOption-select-label\" htmlFor=\"outlined-productOption-native-simple\">\r\n                        Product Options\r\n                    </InputLabel>\r\n                    <Select\r\n                        required\r\n                        multiple\r\n                        value={selectedProductOptions}\r\n                        onChange={(e: any) => {\r\n                            setSelectedProductOptions(e.target.value)\r\n                        }}\r\n                        labelId=\"productOption-select-label\"\r\n                        labelWidth={labelWidth}\r\n                        inputProps={{\r\n                            name: 'productOption',\r\n                            id: 'outlined-productOption-native-simple',\r\n                        }}\r\n                    >\r\n                        {productOptionOptions}\r\n                    </Select>\r\n                    <FormHelperText>Select the Product Options available for this product.</FormHelperText>\r\n                </FormControl>\r\n\r\n                {/* form submit button */}\r\n                <Button\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.submit}\r\n                >\r\n                    Save\r\n                </Button>\r\n\r\n                {/* loader */}\r\n                {loading && <CircularProgress />}\r\n\r\n                {/* error / success messages */}\r\n                <Box mb={2}>\r\n                    {success ? <Alert variant=\"outlined\" severity=\"success\" children={'Changes saved.'} /> : null}\r\n\r\n                    {\r\n                        errors ? errors.map((e: string, index: number) => (\r\n                            <Box mb={2} key={index}><Alert variant=\"outlined\" severity=\"error\" children={e} /></Box>\r\n                        )) : null\r\n                    }\r\n                </Box>\r\n            </form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n    return {\r\n        categories: state.category.categories,\r\n        productOptions: state.productOption.productOptions,\r\n        product: state.product.product,\r\n        success: state.product.submitSuccess,\r\n        errors: state.product.submitError\r\n    }\r\n}\r\n\r\nconst mapDispatch = {\r\n    setProduct: setProductAction,\r\n    submitForm: submitProductAction,\r\n    getProduct: getProductAction,\r\n    getCategory: getCategoryAction,\r\n    getProductOption: getProductOptionAction,\r\n    clearSubmitOutcome: clearSubmitProductOutcomeAction\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatch\r\n)(AddProductForm)","import React from \"react\"\r\nimport { connect } from 'react-redux'\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\n// material ui components\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Container from '@material-ui/core/Container'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n// redux\r\nimport { submitCategoryFormAction, getCategoryAction, setCategoryAction, clearSubmitOutcomeAction } from './../store/features/category'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        textAlign: 'center'\r\n    },\r\n    form: {\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\ninterface formErrors {\r\n    categoryName: string | null,\r\n}\r\n\r\ninterface formPayload {\r\n    name: string,\r\n    id?: string\r\n}\r\n\r\nfunction CategoryForm({ category, submitCategoryForm, success, errors, getCategory, setCategory, clearSubmitOutcome }: any) {\r\n    const classes = useStyles()\r\n    let { id } = useParams()\r\n    let history = useHistory()\r\n\r\n    let formErrorsState = {\r\n        categoryName: null\r\n    }\r\n\r\n    // state\r\n    const [formErrors, setFormErrors] = React.useState<formErrors>(formErrorsState)\r\n    // form submission loading indicator\r\n    const [loading, setLoading] = React.useState<boolean>(false)\r\n    const [categoryId, setCategoryId] = React.useState<string | undefined>(undefined)\r\n    const [categoryName, setCategoryName] = React.useState<string>('')\r\n\r\n    // effects\r\n    React.useEffect(() => {\r\n        return () => {\r\n            // clear redux store category data\r\n            setCategory(null)\r\n            clearSubmitOutcome()\r\n        }\r\n    }, [])\r\n\r\n    // id effect\r\n    React.useEffect(() => {\r\n        // fetch category if we don't have it\r\n        if (id) {\r\n            setCategoryId(id)\r\n            if (!category) {\r\n                getCategory({ id })\r\n            }\r\n        }\r\n        if (!id) {\r\n            setCategoryId(undefined)\r\n            // clear store category data\r\n            setCategory(null)\r\n            clearSubmitOutcome()\r\n        }\r\n    }, [id])\r\n\r\n    // category data model effect\r\n    React.useEffect(() => {\r\n        if (category) {\r\n            setCategoryName(category.name)\r\n        }\r\n        return () => {\r\n            setCategoryName('')\r\n        }\r\n    }, [category])\r\n\r\n    // clear stale success/error messages when loading a new request\r\n    React.useEffect(() => {\r\n        if (loading) {\r\n            clearSubmitOutcome()\r\n        }\r\n    }, [loading])\r\n\r\n    // turn off loading when a form submission response is received\r\n    React.useEffect(() => {\r\n        if (success && success.id) {\r\n            // if we received a created model id navigate to edit with id\r\n            history.push(`/admin/category/edit/${success.id}`)\r\n        }\r\n        return () => {\r\n            setLoading(false)\r\n        }\r\n    }, [success, errors])\r\n\r\n\r\n\r\n    function handleSubmit(event: any) {\r\n        event.preventDefault()\r\n        if (loading) {\r\n            return\r\n        }\r\n        setLoading(true)\r\n        let formData = {\r\n            name: categoryName\r\n        } as formPayload\r\n\r\n        if (categoryId) {\r\n            formData.id = categoryId\r\n        }\r\n\r\n        submitCategoryForm(formData)\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"sm\" className={classes.root}>\r\n            <Typography component=\"h1\" variant=\"h3\">{categoryId ? 'Edit' : 'Create'} Category</Typography>\r\n            <form className={classes.form} onSubmit={(e) => handleSubmit(e)}>\r\n                {/* Category Name */}\r\n                <TextField\r\n                    error={!!formErrors['categoryName']}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"categoryName\"\r\n                    label=\"Category Name\"\r\n                    name=\"categoryName\"\r\n                    autoComplete=\"off\"\r\n                    value={categoryName}\r\n                    onChange={(event) => setCategoryName(event?.target.value)}\r\n                />\r\n                {!categoryName && <FormHelperText>Enter a category name.</FormHelperText>}\r\n\r\n                {/* form submit button */}\r\n                <Button\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.submit}\r\n                // disabled={disableSaveButton()}\r\n                >\r\n                    Save\r\n                </Button>\r\n\r\n                {/* loader */}\r\n                {loading && <CircularProgress />}\r\n\r\n                {/* error / success messages */}\r\n                <Box mb={2}>\r\n                    {success ? <Alert variant=\"outlined\" severity=\"success\" children={'Changes saved.'} /> : null}\r\n\r\n                    {\r\n                        errors ? errors.map((e: string, index: number) => (\r\n                            <Box mb={2} key={index}><Alert variant=\"outlined\" severity=\"error\" children={e} /></Box>\r\n                        )) : null\r\n                    }\r\n\r\n                </Box>\r\n            </form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n    return {\r\n        category: state.category.category,\r\n        success: state.category.submitCategoryFormSuccess,\r\n        errors: state.category.submitCategoryFormError\r\n    }\r\n}\r\n\r\nconst mapDispatch = {\r\n    setCategory: setCategoryAction,\r\n    submitCategoryForm: submitCategoryFormAction,\r\n    getCategory: getCategoryAction,\r\n    clearSubmitOutcome: clearSubmitOutcomeAction\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatch\r\n)(CategoryForm)","import { createSlice, createAction } from '@reduxjs/toolkit'\r\n\r\nconst slice = createSlice({\r\n    name: 'referralCode',\r\n    initialState: {\r\n        referralCodes: null,\r\n        submitSuccess: null,\r\n        submitError: null,\r\n    },\r\n    reducers: {\r\n        setReferralCodes(state, action) {\r\n            state.referralCodes = action.payload\r\n        },\r\n        clearSubmitOutcome(state) {\r\n            state.submitSuccess = null\r\n            state.submitError = null\r\n        },\r\n        setSubmitOutcome(state, action) {\r\n            const { success, errors } = action.payload\r\n            if (success) {\r\n                state.submitSuccess = success\r\n            } else {\r\n                state.submitSuccess = null\r\n            }\r\n\r\n            if (errors) {\r\n                state.submitError = errors\r\n            } else {\r\n                state.submitError = null\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const reducer = slice.reducer\r\nexport const { setSubmitOutcome: setSubmitReferralCodeFormOutcomeAction, clearSubmitOutcome: clearSubmitReferralCodeFormOutcomeAction, setReferralCodes: setReferralCodesAction } = slice.actions\r\nexport const getReferralCodeAction = createAction<any>('referralCode/get')\r\nexport const submitReferralCodeFormAction = createAction<any>('referralCode/submitForm')","import React from \"react\"\r\nimport { connect } from 'react-redux'\r\n\r\n// material ui components\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Container from '@material-ui/core/Container'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { clearSubmitReferralCodeFormOutcomeAction, submitReferralCodeFormAction } from \"../store/features/referralCode\"\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        textAlign: 'center'\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\ninterface formErrors {\r\n    quantity: string | null\r\n}\r\n\r\ninterface formPayload {\r\n    quantity: number\r\n}\r\n\r\nfunction ReferralCodeForm({ submitForm, success, errors, clearSubmitOutcome }: any) {\r\n    const classes = useStyles()\r\n    let formErrorsState = {\r\n        quantity: null,\r\n    }\r\n    // component state\r\n    const [labelWidth, setLabelWidth] = React.useState(0);\r\n\r\n    const [formErrors, setFormErrors] = React.useState<formErrors>(formErrorsState)\r\n    // form submission loading\r\n    const [loading, setLoading] = React.useState<boolean>(false)\r\n    const [quantity, setQuantity] = React.useState<string>('')\r\n\r\n    // effects\r\n    // set initial select label width\r\n    React.useEffect(() => {\r\n        setLabelWidth(inputLabel.current!.offsetWidth);\r\n    }, []);\r\n\r\n    // on component unmount clear redux store referral submission data\r\n    React.useEffect(() => {\r\n        return () => {\r\n            clearSubmitOutcome()\r\n        }\r\n    }, [])\r\n\r\n    // clear stale success/error messages when loading a new request\r\n    React.useEffect(() => {\r\n        if (loading) {\r\n            clearSubmitOutcome()\r\n        }\r\n    }, [loading])\r\n\r\n    // turn off loading when a form submission response is received\r\n    React.useEffect(() => {\r\n        return () => {\r\n            setLoading(false)\r\n        }\r\n    }, [success, errors])\r\n\r\n\r\n\r\n\r\n    const inputLabel = React.useRef<HTMLLabelElement>(null);\r\n\r\n    const quantityOptions = (\r\n        [\r\n            <MenuItem key={'10'} value={'10'}>10</MenuItem>,\r\n            <MenuItem key={'25'} value={'25'}>25</MenuItem>,\r\n            <MenuItem key={'50'} value={'50'}>50</MenuItem>\r\n        ]\r\n    )\r\n\r\n    function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n        event.preventDefault()\r\n        if (loading) {\r\n            return\r\n        }\r\n        setLoading(true)\r\n        let form: formPayload = {\r\n            quantity: parseInt(quantity),\r\n        }\r\n        submitForm(form)\r\n    }\r\n\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"sm\" className={classes.root}>\r\n            <Typography component=\"h1\" variant=\"h3\">Generate Referral Codes</Typography>\r\n            <form onSubmit={handleSubmit}>\r\n                {/* Referral Code Quantity */}\r\n                <FormControl required error={!!formErrors['quantity']} variant=\"outlined\" fullWidth margin=\"normal\">\r\n                    <InputLabel ref={inputLabel} id=\"quantity-select-label\" htmlFor=\"quantity-age-native-simple\">\r\n                        Quantity\r\n                    </InputLabel>\r\n                    <Select\r\n                        required\r\n                        value={quantity}\r\n                        onChange={(e: any) => setQuantity(e.target.value)}\r\n                        labelId=\"quantity-select-label\"\r\n                        labelWidth={labelWidth}\r\n                        inputProps={{\r\n                            name: 'quantity',\r\n                            id: 'outlined-quantity-native-simple',\r\n                        }}\r\n                    >\r\n                        {quantityOptions}\r\n                    </Select>\r\n                    <FormHelperText>Choose the quantity of referral codes to be generated.</FormHelperText>\r\n                </FormControl>\r\n\r\n                {/* form submit button */}\r\n                <Button\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.submit}\r\n                >\r\n                    Generate Codes\r\n                </Button>\r\n\r\n                {/* loader */}\r\n                {loading && <CircularProgress />}\r\n\r\n                {/* error / success messages */}\r\n                <Box mb={2}>\r\n                    {success ? <Alert variant=\"outlined\" severity=\"success\" children={'Changes saved.'} /> : null}\r\n\r\n                    {\r\n                        errors ? errors.map((e: string, index: number) => (\r\n                            <Box mb={2} key={index}><Alert variant=\"outlined\" severity=\"error\" children={e} /></Box>\r\n                        )) : null\r\n                    }\r\n                </Box>\r\n            </form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n    return {\r\n        success: state.referralCode.submitSuccess,\r\n        errors: state.referralCode.submitError\r\n    }\r\n}\r\n\r\nconst mapDispatch = {\r\n    submitForm: submitReferralCodeFormAction,\r\n    clearSubmitOutcome: clearSubmitReferralCodeFormOutcomeAction\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatch\r\n)(ReferralCodeForm)","import React from 'react';\r\nimport { Theme, makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport ButtonBase from '@material-ui/core/ButtonBase';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst images = [\r\n    {\r\n        url: '/static/images/grid-list/breakfast.jpg',\r\n        title: 'Breakfast',\r\n        width: '25%',\r\n    },\r\n    {\r\n        url: '/static/images/grid-list/burgers.jpg',\r\n        title: 'Burgers',\r\n        width: '25%',\r\n    },\r\n    {\r\n        url: '/static/images/grid-list/camera.jpg',\r\n        title: 'Camera',\r\n        width: '30%',\r\n    },\r\n];\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexWrap: 'wrap',\r\n            minWidth: 300,\r\n            width: '100%',\r\n        },\r\n        image: {\r\n            position: 'relative',\r\n            height: 200,\r\n            [theme.breakpoints.down('xs')]: {\r\n                width: '100% !important', // Overrides inline-style\r\n                height: 100,\r\n            },\r\n            '&:hover, &$focusVisible': {\r\n                zIndex: 1,\r\n                '& $imageBackdrop': {\r\n                    opacity: 0.15,\r\n                },\r\n                '& $imageMarked': {\r\n                    opacity: 0,\r\n                },\r\n                '& $imageTitle': {\r\n                    border: '4px solid currentColor',\r\n                },\r\n            },\r\n        },\r\n        focusVisible: {},\r\n        imageButton: {\r\n            position: 'absolute',\r\n            left: 0,\r\n            right: 0,\r\n            top: 0,\r\n            bottom: 0,\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            color: theme.palette.common.white,\r\n        },\r\n        imageSrc: {\r\n            position: 'absolute',\r\n            left: 0,\r\n            right: 0,\r\n            top: 0,\r\n            bottom: 0,\r\n            backgroundSize: 'cover',\r\n            backgroundPosition: 'center 40%',\r\n        },\r\n        imageBackdrop: {\r\n            position: 'absolute',\r\n            left: 0,\r\n            right: 0,\r\n            top: 0,\r\n            bottom: 0,\r\n            backgroundColor: theme.palette.common.black,\r\n            opacity: 0.4,\r\n            transition: theme.transitions.create('opacity'),\r\n        },\r\n        imageTitle: {\r\n            position: 'relative',\r\n            padding: `${theme.spacing(2)}px ${theme.spacing(4)}px ${theme.spacing(1) + 6}px`,\r\n        },\r\n        imageMarked: {\r\n            height: 3,\r\n            width: 18,\r\n            backgroundColor: theme.palette.common.white,\r\n            position: 'absolute',\r\n            bottom: -2,\r\n            left: 'calc(50% - 9px)',\r\n            transition: theme.transitions.create('opacity'),\r\n        },\r\n    }),\r\n);\r\n\r\nexport default function ButtonBases({ featured }: any) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {featured && featured.map((featuredItem: any) => (\r\n                <ButtonBase\r\n                    focusRipple\r\n                    key={featuredItem.id}\r\n                    className={classes.image}\r\n                    focusVisibleClassName={classes.focusVisible}\r\n                    style={{\r\n                        width: '25%',\r\n                    }}\r\n                >\r\n                    <span\r\n                        className={classes.imageSrc}\r\n                        style={{\r\n                            backgroundImage: `url(\"/storage/${featuredItem.image}\")`,\r\n                        }}\r\n                    />\r\n                    <span className={classes.imageBackdrop} />\r\n                    <span className={classes.imageButton}>\r\n                        <Typography\r\n                            component=\"span\"\r\n                            variant=\"subtitle1\"\r\n                            color=\"inherit\"\r\n                            className={classes.imageTitle}\r\n                        >\r\n                            {featuredItem.title}\r\n                            <span className={classes.imageMarked} />\r\n                        </Typography>\r\n                    </span>\r\n                </ButtonBase>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import { createSlice, createAction } from '@reduxjs/toolkit'\r\n\r\nconst systemSlice = createSlice({\r\n    name: 'system',\r\n    initialState: {\r\n        echo: null,\r\n        registerSubmitSuccess: null,\r\n        registerSubmitError: null,\r\n        featured: null,\r\n        products: null\r\n    },\r\n    reducers: {\r\n        setFeatured(state, action) {\r\n            state.featured = action.payload\r\n        },\r\n        setProducts(state, action) {\r\n            state.products = action.payload\r\n        },\r\n        setEcho(state, action) {\r\n            state.echo = action.payload\r\n        },\r\n        clearRegisterSubmitOutcome(state) {\r\n            state.registerSubmitSuccess = null\r\n            state.registerSubmitError = null\r\n        },\r\n        setRegisterSubmitOutcome(state, action) {\r\n            const { success, errors } = action.payload\r\n            if (success) {\r\n                state.registerSubmitSuccess = success\r\n            } else {\r\n                state.registerSubmitSuccess = null\r\n            }\r\n\r\n            if (errors) {\r\n                state.registerSubmitError = errors\r\n            } else {\r\n                state.registerSubmitError = null\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const { setEcho, setRegisterSubmitOutcome: setRegisterSubmitOutcomeAction, clearRegisterSubmitOutcome: clearRegisterSubmitOutcomeAction, setFeatured: setHomeFeaturedAction, setProducts: setHomeProductsAction } = systemSlice.actions\r\nexport const systemReducer = systemSlice.reducer\r\nexport const submitRegisterFormAction = createAction<any>('register/submitForm')\r\nexport const getHomeContentAction = createAction<any>('home/get')","import { createSlice, createAction } from '@reduxjs/toolkit'\r\n\r\nconst slice = createSlice({\r\n    name: 'cart',\r\n    initialState: {\r\n        cart: [],\r\n        submitSuccess: null,\r\n        submitError: null\r\n    },\r\n    reducers: {\r\n        addCartItem(state: any, action: any) {\r\n            state.cart = [...state.cart, action.payload]\r\n            // state.cart.push(action.payload)\r\n        },\r\n        clearCart(state) {\r\n            state.cart = []\r\n        },\r\n        removeFromCart(state: any, action: any) {\r\n            state.cart = state.cart.filter((item: any) => {\r\n                if (item.id === action.payload.id) {\r\n                    return false\r\n                }\r\n                return true\r\n            })\r\n        },\r\n        clearSubmitOutcome(state) {\r\n            state.submitSuccess = null\r\n            state.submitError = null\r\n        },\r\n        setSubmitOutcome(state, action) {\r\n            const { success, errors } = action.payload\r\n            if (success) {\r\n                state.submitSuccess = success\r\n            } else {\r\n                state.submitSuccess = null\r\n            }\r\n\r\n            if (errors) {\r\n                state.submitError = errors\r\n            } else {\r\n                state.submitError = null\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const reducer = slice.reducer\r\nexport const { addCartItem, clearCart, removeFromCart, clearSubmitOutcome: clearSubmitOrderOutcomeAction, setSubmitOutcome: setSubmitOrderOutcomeAction } = slice.actions\r\nexport const submitOrderAction = createAction<any>('cart/submitOrder')","import React from \"react\";\r\nimport { connect } from 'react-redux'\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport TextField from '@material-ui/core/TextField'\r\n\r\nimport { addCartItem, removeFromCart } from \"../store/features/cart\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        minWidth: 275\r\n    },\r\n    media: {\r\n        height: 0,\r\n        paddingTop: \"56.25%\" // 16:9\r\n    },\r\n    bullet: {\r\n        display: \"inline-block\",\r\n        margin: \"0 2px\",\r\n        transform: \"scale(0.8)\"\r\n    },\r\n    title: {\r\n        fontSize: 14\r\n    },\r\n    pos: {\r\n        marginBottom: 12\r\n    },\r\n    price: {\r\n        color: \"red\"\r\n    }\r\n});\r\n\r\ninterface formErrors {\r\n    option: string | null,\r\n    customOrderMessage: string | null\r\n}\r\n\r\nfunction ProductCard({\r\n    title,\r\n    price,\r\n    image,\r\n    manufacturer,\r\n    item,\r\n    addToCart,\r\n    cart,\r\n    removeFromCart,\r\n    options,\r\n    onOptionSelected,\r\n    cartButton = true,\r\n    infoString = '',\r\n}: {\r\n    title: string;\r\n    image: string;\r\n    price: string;\r\n    manufacturer: string;\r\n    item: any;\r\n    addToCart?: any;\r\n    cart?: any[];\r\n    removeFromCart?: any;\r\n    options?: any[],\r\n    onOptionSelected?: any;\r\n    cartButton?: boolean;\r\n    infoString?: string;\r\n}) {\r\n    const classes = useStyles();\r\n    const bull = <span className={classes.bullet}>•</span>;\r\n\r\n    let formErrorsState = {\r\n        option: null,\r\n        customOrderMessage: null\r\n    }\r\n    // state\r\n    const [labelWidth, setLabelWidth] = React.useState(0);\r\n    const [formErrors, setFormErrors] = React.useState<formErrors>(formErrorsState)\r\n    const [optionSelected, setOptionSelected] = React.useState<string>('')\r\n    const [customOrderMessage, setCustomOrderMessage] = React.useState<string>('')\r\n\r\n    const inputLabel = React.useRef<HTMLLabelElement>(null);\r\n\r\n    // effects\r\n    // set initial select label width\r\n    React.useEffect(() => {\r\n        if (options) {\r\n            setLabelWidth(inputLabel.current!.offsetWidth);\r\n        }\r\n    }, [options]);\r\n\r\n    function handleAddToCart() {\r\n        addToCart(item)\r\n    }\r\n\r\n    function remove() {\r\n        removeFromCart(item)\r\n    }\r\n\r\n    let inCart = cart?.find((cartItem) => {\r\n        if (cartItem.id === item.id) {\r\n            return true\r\n        }\r\n        return false\r\n    })\r\n\r\n    let productOptionsRender\r\n\r\n    if (options) {\r\n        productOptionsRender = options.map((option: any) => {\r\n            return <MenuItem key={option.id} value={option.id}>{option.name}</MenuItem>\r\n        })\r\n    }\r\n\r\n    function optionSelectedUpdated(value: number | string, custom = false) {\r\n        onOptionSelected(value, item.id, custom)\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardMedia\r\n                className={classes.media}\r\n                image={`/storage/${image}`}\r\n                title={title}\r\n            />\r\n            <CardContent>\r\n                <Typography variant=\"h5\" component=\"h3\">\r\n                    {title}\r\n                </Typography>\r\n                <Typography className={classes.pos} color=\"textSecondary\">\r\n                    {manufacturer}\r\n                </Typography>\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                    <b className={classes.price}>{price}</b>\r\n                </Typography>\r\n\r\n                {/* product options */}\r\n                {options && <FormControl required error={!!formErrors['option']} variant=\"outlined\" fullWidth margin=\"normal\">\r\n                    <InputLabel ref={inputLabel} id=\"option-select-label\" htmlFor=\"outlined-option-native-simple\">\r\n                        Product Option\r\n                    </InputLabel>\r\n                    <Select\r\n                        required\r\n                        value={optionSelected}\r\n                        onChange={(e: any) => {\r\n                            setOptionSelected(e.target.value)\r\n                            optionSelectedUpdated(e.target.value)\r\n                        }}\r\n                        labelId=\"option-select-label\"\r\n                        labelWidth={labelWidth}\r\n                        inputProps={{\r\n                            name: 'options',\r\n                            id: 'outlined-option-native-simple',\r\n                        }}\r\n                    >\r\n                        {productOptionsRender}\r\n                    </Select>\r\n                    <FormHelperText>Option must be selected.</FormHelperText>\r\n                </FormControl>\r\n                }\r\n                {\r\n                    optionSelected === 'Custom' &&\r\n                    // custom order message\r\n                    <TextField\r\n                        error={!!formErrors['customOrderMessage']}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"customOrderMessage\"\r\n                        label=\"Custom order message\"\r\n                        name=\"customOrderMessage\"\r\n                        autoComplete=\"off\"\r\n                        value={customOrderMessage}\r\n                        onChange={(e) => {\r\n                            setCustomOrderMessage(e?.target.value)\r\n                            optionSelectedUpdated(e.target.value, true)\r\n                        }}\r\n                    />\r\n                }\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                    <b>{infoString}</b>\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n                {cartButton && (!inCart ?\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleAddToCart}>\r\n                        Add to Cart\r\n                    </Button>\r\n                    :\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={remove}>\r\n                        Remove from Cart\r\n                    </Button>\r\n                )}\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n    return {\r\n        cart: state.cart.cart,\r\n    }\r\n}\r\n\r\nconst mapDispatch = {\r\n    addToCart: addCartItem,\r\n    removeFromCart\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatch\r\n)(ProductCard)","import React, { useEffect } from \"react\";\nimport { connect } from 'react-redux'\n\nimport Box from '@material-ui/core/Box';\nimport Grid from \"@material-ui/core/Grid\";\nimport HomeContent from \"../seed/home\";\nimport { Link } from \"react-router-dom\";\nimport FeaturedTiles from './../components/FeaturedTiles'\nimport { getHomeContentAction } from \"../store/features/system\";\nimport ProductCard from './../components/ProductCard'\n\nconst Home: React.FC = ({ featured, products, getHomeContent }: any) => {\n  // effects\n  // on mount get home content from api\n  useEffect(() => {\n    getHomeContent()\n  }, [])\n\n  let productCards\n  if (products) {\n    productCards = products.map((product: any) => {\n      return (\n        <Grid item xs={12} sm={6} md={4} lg={3} key={product.id}>\n          <ProductCard title={product.name} image={product.image} price=\"\" manufacturer=\"\" item={product} />\n        </Grid>\n      )\n    })\n  }\n\n  return (\n    <div>\n      <FeaturedTiles featured={featured} />.\n      <Box mt={3}>\n        <Grid container spacing={3}>\n          {productCards}\n        </Grid>\n      </Box>\n    </div>);\n};\n\nfunction mapStateToProps(state: any) {\n  return {\n    featured: state.system.featured,\n    products: state.system.products,\n  }\n}\n\nconst mapDispatch = {\n  getHomeContent: getHomeContentAction,\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatch\n)(Home)","import React, { useEffect, useState } from \"react\";\nimport { connect } from 'react-redux'\nimport { useHistory } from 'react-router-dom';\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport Alert from '@material-ui/lab/Alert'\nimport Box from '@material-ui/core/Box'\nimport Button from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Container from '@material-ui/core/Container'\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from '@material-ui/core/Typography'\nimport Divider from '@material-ui/core/Divider'\n\nimport HomeContent from \"../seed/home\"\nimport { Link } from \"react-router-dom\"\nimport FeaturedTiles from './../components/FeaturedTiles'\nimport { getHomeContentAction } from \"../store/features/system\"\nimport ProductCard from './../components/ProductCard'\nimport GoogleMap from 'google-map-react'\nimport { submitOrderAction, clearSubmitOrderOutcomeAction } from \"../store/features/cart\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    textAlign: 'center'\n  }\n}))\n\ntype productOrderData = {\n  id: number,\n} & (\n    | { product_option_id: number; custom_message?: never }\n    | { product_option_id?: never; custom_message: string }\n  )\n\ninterface userGeoLocation {\n  lat: number,\n  lng: number\n}\n\ninterface orderPayload {\n  products: productOrderData[],\n  location: userGeoLocation\n}\n\nconst Cart: React.FC = ({ cart, submitOrder, errors, success, clearSubmitOutcome }: any) => {\n  const classes = useStyles()\n  // component state\n  // default location is middle of manhattan before user allows geolocation\n  const [userLocation, setUserLocation] = useState<any>(null)\n\n  // cart items\n  const [orderItems, setOrderItems] = useState<any[]>([])\n\n  // geolocation watcher id\n  const [watcherId, setWatcherId] = useState<number | null>(null)\n\n  // local form errors\n  const [formValidationErrors, setFormValidationErrors] = useState<string[]>([])\n  const [loading, setLoading] = React.useState<boolean>(false)\n\n  let defaultLocation = {\n    lat: 40.754252,\n    lng: -73.984786\n  }\n\n  const history = useHistory()\n\n  // effects\n  // get device geolocation on mount\n  useEffect(() => {\n    getLocation()\n  }, [])\n\n  // when component unmounts clear order submission outcomes\n  useEffect(() => {\n    return () => {\n      clearSubmitOutcome()\n    }\n  }, [])\n\n  // clear stale success/error messages when loading a new request\n  useEffect(() => {\n    if (loading) {\n      clearSubmitOutcome()\n    }\n  }, [loading])\n\n  // turn off loading when an order submission response is received\n  useEffect(() => {\n    if (success && success.id) {\n      // if order successfully placed navigate to order tracking page\n      history.push(`/order`)\n    }\n    return () => {\n      setLoading(false)\n    }\n  }, [success, errors])\n\n  // setup order items with options / selected option\n  useEffect(() => {\n    let items: any[] = []\n    cart.map((cartProduct: any) => {\n      let newOptions = [\n        ...cartProduct.options,\n        {\n          id: 'Custom',\n          name: 'Custom'\n        }\n      ]\n      items.push({\n        ...cartProduct,\n        options: newOptions,\n        selected_option: '',\n        custom_message: ''\n      })\n    })\n    setOrderItems(items)\n  }, [cart])\n\n  const mapStyles = {\n    width: '100%',\n    height: '300px',\n    position: 'relative'\n  }\n\n  const imgStyle = {\n    height: '100%'\n  }\n\n  const markerStyle = {\n    height: '50px',\n    width: '50px',\n    marginTop: '-50px'\n  }\n\n  // google maps api key\n  let mapApiKey = 'AIzaSyBQ3qO8KfzQWAQ2KXFMTe02qw9BvuKLsqY'\n\n  const Marker = ({ title }: any) => (\n    <div style={markerStyle}>\n      <img style={imgStyle} src=\"/marker.png\" alt={title} />\n      <h3>{title}</h3>\n    </div>\n  );\n\n  function productOptionSelectedUpdated(value: number | string, productId: number, custom: boolean = false) {\n    setOrderItems(orderItems.map((orderItem: any) => {\n      if (orderItem.id === productId) {\n        let optionUpdate: any = {}\n        if (custom) {\n          optionUpdate.custom_message = value\n          optionUpdate.selected_option = ''\n        } else {\n          optionUpdate.selected_option = value\n          optionUpdate.custom_message = ''\n        }\n        return {\n          ...orderItem,\n          ...optionUpdate\n        }\n      }\n      return orderItem\n    }))\n  }\n\n  let orderItemsRender\n  if (orderItems) {\n    orderItemsRender = orderItems.map((orderItem: any, index: number, products: any[]) => {\n      return (\n        <div key={orderItem.id}>\n          <Box my={2}>\n            <ProductCard title={orderItem.name} image={orderItem.image} price=\"\" manufacturer=\"\" item={orderItem} options={orderItem.options} onOptionSelected={productOptionSelectedUpdated} />\n          </Box >\n          {index < products.length - 1 ? <Divider /> : null}\n        </div>\n      )\n    })\n  }\n\n  const getLocation = () => {\n    if (\"geolocation\" in navigator) {\n      navigator.geolocation.getCurrentPosition((pos: any) => {\n        let crd = pos.coords\n        setUserLocation({\n          lat: crd.latitude,\n          lng: crd.longitude\n        })\n      })\n    } else {\n      alert(\"Sorry, geolocation is not available on your device. You need that to use this app\");\n    }\n  }\n\n  function validate() {\n    let validationErrors = []\n    if (orderItems.length < 1) {\n      validationErrors.push('No products selected.')\n    }\n    // ensure every product has a selected option\n    for (const orderItem of orderItems) {\n      if (!orderItem.selected_option && !orderItem.custom_message) {\n        validationErrors.push('Must select an order option for every product in cart.')\n        break;\n      }\n    }\n    setFormValidationErrors(validationErrors)\n\n    if (validationErrors.length > 0) {\n      return validationErrors\n    }\n    return false\n  }\n\n  function handleOrderSubmit() {\n    if (validate()) {\n      return\n    }\n    if (loading) {\n      return\n    }\n    setLoading(true)\n\n    let productsPayload: productOrderData[] = orderItems.map((orderItem: any) => {\n      console.log('show orderItem', orderItem)\n      let option_data: any = {}\n\n      if (orderItem.selected_option) {\n        option_data.product_option_id = orderItem.selected_option\n      } else {\n        option_data.custom_message = orderItem.custom_message\n      }\n\n      return {\n        id: orderItem.id,\n        ...option_data\n      } as productOrderData\n    })\n\n    let payload: orderPayload = {\n      products: productsPayload,\n      location: {\n        lat: userLocation.lat,\n        lng: userLocation.lng\n      }\n    }\n\n    submitOrder(payload)\n  }\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h4\" color=\"inherit\" noWrap>\n        Confirm Order\n      </Typography>\n      <Container component=\"main\" maxWidth=\"sm\">\n        <Box mt={4}>\n\n          <GoogleMap\n            style={mapStyles}\n            bootstrapURLKeys={{ key: mapApiKey }}\n            center={userLocation ? { lat: userLocation.lat, lng: userLocation.lng } : defaultLocation}\n            zoom={14}\n          >\n            {\n              userLocation &&\n              <Marker\n                title={'Current Location'}\n                lat={userLocation.lat}\n                lng={userLocation.lng}\n              />\n            }\n          </GoogleMap>\n          <Box mt={2}>\n            <Typography variant=\"body1\" color=\"inherit\" noWrap>\n              Confirm Your Location. Allow device location tracking.\n            </Typography>\n          </Box>\n        </Box>\n\n        <Box my={4}>\n          <Divider />\n        </Box>\n\n        <Box>\n          <Typography variant=\"h4\" color=\"inherit\" noWrap>\n            Products in cart:\n          </Typography>\n          {orderItems.length > 0 ? orderItemsRender : <Typography variant=\"body1\" color=\"inherit\" noWrap>No items in cart.</Typography>}\n        </Box>\n\n        {/* loader */}\n        {loading && <CircularProgress />}\n\n        {/* error / success messages */}\n        <Box my={2}>\n          {/* {success ? <Alert variant=\"outlined\" severity=\"success\" children={'Changes saved.'} /> : null} */}\n          {\n            formValidationErrors.map((formValidationError: string) => {\n              return (\n                <Box mb={2} key={formValidationError}><Alert variant=\"outlined\" severity=\"error\" children={formValidationError} /></Box>\n              )\n            })\n          }\n          {\n            errors ? errors.map((e: string, index: number) => (\n              <Box mb={2} key={index}><Alert variant=\"outlined\" severity=\"error\" children={e} /></Box>\n            )) : null\n          }\n        </Box>\n\n        <Box my={4}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={handleOrderSubmit}\n          >\n            Submit Order\n          </Button>\n        </Box>\n\n      </Container>\n    </div >\n  );\n};\n\nfunction mapStateToProps(state: any) {\n  return {\n    cart: state.cart.cart,\n    errors: state.cart.submitError,\n    success: state.cart.submitSuccess\n  }\n}\n\nconst mapDispatch = {\n  submitOrder: submitOrderAction,\n  clearSubmitOutcome: clearSubmitOrderOutcomeAction\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatch\n)(Cart)","import React, { createContext } from 'react'\r\n\r\nlet defaultState: any = {\r\n    echo: undefined\r\n}\r\n\r\nexport const EchoContext = createContext(defaultState)\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from 'react-redux'\r\nimport clsx from 'clsx';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Alert from '@material-ui/lab/Alert'\r\nimport Box from '@material-ui/core/Box'\r\nimport Button from '@material-ui/core/Button'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Container from '@material-ui/core/Container'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport { getOrderAction, clearOrderUpdateOutcomeAction, setOrderAction } from \"../store/features/order\";\r\nimport green from '@material-ui/core/colors/green';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ProductCard from './../components/ProductCard'\r\n\r\nimport useOrderUpdateApi from '../hooks/useOrderUpdateApi'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        textAlign: 'center'\r\n    },\r\n    orderStatus: {\r\n        textTransform: 'uppercase'\r\n    },\r\n    orderConfirmed: {\r\n        color: green[500]\r\n    },\r\n}))\r\n\r\nconst Order: React.FC = ({ user, order, getOrder, setOrder, errors, success }: any) => {\r\n    const classes = useStyles()\r\n    // component state\r\n    const [loading, setLoading] = React.useState<boolean>(false)\r\n    console.log('show user', user)\r\n    // fetch order details\r\n    React.useEffect(() => {\r\n        setLoading(true)\r\n        getOrder()\r\n        // getCategory({ queryParams })\r\n    }, [])\r\n\r\n    // turn loader off after fetching order data\r\n    useEffect(() => {\r\n        return () => {\r\n            setLoading(false)\r\n        }\r\n    }, [order])\r\n\r\n    useOrderUpdateApi(user, (orderUpdate: any) => {\r\n        let orderUpdateObj = {\r\n            ...order,\r\n            order_status: orderUpdate.order.order_status,\r\n            delivery_time: orderUpdate.order.delivery_time\r\n        }\r\n\r\n        setOrder(orderUpdateObj)\r\n    })\r\n\r\n    let productCards\r\n    if (order && order.products) {\r\n        productCards = Object.values(order.products).map((product: any) => {\r\n            return (\r\n                <Grid item xs={12} sm={6} md={4} lg={3} key={product.id}>\r\n                    <ProductCard title={product.name} image={product.image} price=\"\" manufacturer=\"\" item={product} cartButton={false} infoString={product.custom_message || product.option_selected} />\r\n                </Grid>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Container className={classes.root}>\r\n            <Typography variant=\"h3\" component=\"h1\" color=\"inherit\" noWrap>Order Tracking</Typography>\r\n            <Box mt={2}>\r\n                <Typography variant=\"h6\" color=\"inherit\" noWrap>Details</Typography>\r\n                <Divider />\r\n                {\r\n                    order &&\r\n                    <Box my={4}>\r\n                        <Typography variant=\"body1\" color=\"inherit\" noWrap>Order Status:&nbsp;\r\n                            <Typography variant=\"h6\" component=\"span\" className={clsx(classes.orderStatus, ((order.order_status == 'confirmed' || order.order_status == 'completed') && classes.orderConfirmed))}>{order.order_status}</Typography>\r\n                        </Typography>\r\n                        <Box my={4}>\r\n                            <Grid container spacing={3}>\r\n                                {productCards}\r\n                            </Grid>\r\n                        </Box>\r\n                    </Box>\r\n                }\r\n                {/* loader */}\r\n                <Box my={4}>\r\n                    {loading && <CircularProgress />}\r\n                </Box>\r\n                {!loading && !order && <Typography variant=\"body2\" color=\"inherit\" noWrap>No order found.</Typography>}\r\n            </Box>\r\n        </Container >\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n    return {\r\n        order: state.order.order,\r\n        success: state.order.success,\r\n        errors: state.order.error,\r\n        user: state.user.user\r\n    }\r\n}\r\n\r\nconst mapDispatch = {\r\n    setOrder: setOrderAction,\r\n    getOrder: getOrderAction,\r\n    clearSubmitOutcome: clearOrderUpdateOutcomeAction\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatch\r\n)(Order)","import { useEffect, useContext, useState } from \"react\"\r\nimport { EchoContext } from './../context/echo'\r\n\r\nexport default (user, channelCallback = (orderUpdate) => { }) => {\r\n    const echo = useContext(EchoContext)\r\n    const [bookings, setBookings] = useState([])\r\n    useEffect(() => {\r\n        if (!echo)\r\n            return\r\n        if (user) {\r\n            var channel = echo.channel(`private-order.${user.username}_order`);\r\n            channel.listen('.order.update', function (data) {\r\n                channelCallback(data)\r\n            });\r\n        }\r\n    }, [echo, user])\r\n}","import React, { useState, useEffect, useRef } from \"react\"\r\nimport { connect } from 'react-redux'\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\n// material ui components\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Container from '@material-ui/core/Container'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { MuiPickersUtilsProvider, DateTimePicker } from '@material-ui/pickers';\r\nimport Event from \"@material-ui/icons/Event\";\r\nimport { IconButton, InputAdornment } from \"@material-ui/core\";\r\nimport { MaterialUiPickersDate } from '@material-ui/pickers/typings/date';\r\nimport MomentUtils from '@date-io/moment';\r\nimport { TimePicker } from \"@material-ui/pickers\";\r\nimport GoogleMap from 'google-map-react'\r\nimport moment from 'moment'\r\n\r\nimport { submitAdminOrderEditFormAction, clearSubmitAdminOrderEditOutcomeAction, getAdminOrdersAction } from \"../store/features/order\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        textAlign: 'center'\r\n    },\r\n    form: {\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\ninterface formErrors {\r\n    status: string | null,\r\n}\r\n\r\ninterface formPayload {\r\n    id: string,\r\n    delivery_time: any,\r\n    order_status: string,\r\n}\r\n\r\nlet defaultLocation = {\r\n    lat: 40.754252,\r\n    lng: -73.984786\r\n}\r\n\r\nconst mapStyles = {\r\n    width: '100%',\r\n    height: '300px',\r\n    position: 'relative'\r\n}\r\n\r\nconst imgStyle = {\r\n    height: '100%'\r\n}\r\n\r\nconst markerStyle = {\r\n    height: '50px',\r\n    width: '50px',\r\n    marginTop: '-50px'\r\n}\r\n\r\nfunction EditOrderForm({ order, success, errors, getOrder, submitForm, clearSubmitOutcome }: any) {\r\n    const classes = useStyles()\r\n    let { id } = useParams()\r\n    let history = useHistory()\r\n\r\n    let formErrorsState = {\r\n        status: null\r\n    }\r\n\r\n    // google maps api key\r\n    let mapApiKey = 'AIzaSyBQ3qO8KfzQWAQ2KXFMTe02qw9BvuKLsqY'\r\n\r\n    const Marker = ({ title }: any) => (\r\n        <div style={markerStyle}>\r\n            <img style={imgStyle} src=\"/marker.png\" alt={title} />\r\n            <h3>{title}</h3>\r\n        </div>\r\n    );\r\n\r\n    // component state\r\n    const [formErrors, setFormErrors] = useState<formErrors>(formErrorsState)\r\n    // form submission loading indicator\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [orderId, setOrderId] = useState<string | undefined>(undefined)\r\n    const [labelWidth, setLabelWidth] = useState(0);\r\n    const [statusSelected, setStatusSelected] = useState<string>('')\r\n    const [deliveryDate, setDeliveryDate] = useState<any>(null)\r\n    // default location is middle of manhattan before user allows geolocation\r\n    const [userLocation, setUserLocation] = useState<any>(null)\r\n\r\n    const inputLabel = useRef<HTMLLabelElement>(null);\r\n\r\n    // effects\r\n    // set initial select label width\r\n    useEffect(() => {\r\n        if (order) {\r\n            if (order.delivery_time) {\r\n                setDeliveryDate(moment(order.delivery_time))\r\n            }\r\n\r\n            if (order.location) {\r\n                setUserLocation({\r\n                    lat: order.location.lat,\r\n                    lng: order.location.lng\r\n                })\r\n            }\r\n\r\n            setStatusSelected(order.order_status)\r\n            if (inputLabel.current) {\r\n                setLabelWidth(inputLabel.current!.offsetWidth);\r\n            }\r\n        }\r\n    }, [order]);\r\n\r\n    // clear stale success/error messages when loading a new request\r\n    React.useEffect(() => {\r\n        if (loading) {\r\n            clearSubmitOutcome()\r\n        }\r\n    }, [loading])\r\n\r\n    // turn off loading when a form submission response is received\r\n    React.useEffect(() => {\r\n        return () => {\r\n            setLoading(false)\r\n        }\r\n    }, [success, errors])\r\n\r\n\r\n    // effects\r\n    // React.useEffect(() => {\r\n    //     return () => {\r\n    //         // clear redux store product option data\r\n    //         setProductOption(null)\r\n    //         clearSubmitOutcome()\r\n    //     }\r\n    // }, [])\r\n\r\n    // id effect\r\n    React.useEffect(() => {\r\n        // fetch order if we don't have it\r\n        if (id) {\r\n            setOrderId(id)\r\n            if (!order) {\r\n                getOrder({ id })\r\n            }\r\n        }\r\n        // if (!id) {\r\n        //     setOptionId(undefined)\r\n        //     // clear store product option data\r\n        //     setProductOption(null)\r\n        //     clearSubmitOutcome()\r\n        // }\r\n    }, [id])\r\n\r\n    // // product option data model effect\r\n    // React.useEffect(() => {\r\n    //     if (productOption) {\r\n    //         setOptionName(productOption.name)\r\n    //     }\r\n    //     return () => {\r\n    //         setOptionName('')\r\n    //     }\r\n    // }, [productOption])\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function handleSubmit(event: any) {\r\n        event.preventDefault()\r\n        if (loading) {\r\n            return\r\n        }\r\n        setLoading(true)\r\n\r\n        let formData = {\r\n            id,\r\n            delivery_time: deliveryDate.toISOString(),\r\n            order_status: statusSelected\r\n        } as formPayload\r\n\r\n        submitForm(formData)\r\n    }\r\n\r\n    let statusOptions = [\r\n        <MenuItem key={'confirmed'} value={'confirmed'}>Confirmed</MenuItem>,\r\n        <MenuItem key={'pending'} value={'pending'}>Pending</MenuItem>,\r\n        <MenuItem key={'canceled'} value={'canceled'}>Canceled</MenuItem>,\r\n        <MenuItem key={'completed'} value={'completed'}>Completed</MenuItem>,\r\n    ]\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"sm\" className={classes.root}>\r\n            <Typography component=\"h1\" variant=\"h3\">Edit Order</Typography>\r\n            <form className={classes.form} onSubmit={(e) => handleSubmit(e)}>\r\n                {\r\n                    order &&\r\n                    <>\r\n                        <Box mt={4}>\r\n                            <Typography variant=\"body1\">\r\n                                Order Placed:&nbsp;\r\n                                <b>{moment(order.placed).format('MM-DD-YY hh:mm a')}</b>\r\n                            </Typography>\r\n                            <Typography variant=\"body1\">\r\n                                User:&nbsp;\r\n                        <b>{order.user.username}</b>\r\n                            </Typography>\r\n                            <Typography variant=\"body1\">\r\n                                Phone:&nbsp;\r\n                        <b>{order.user.phone}</b>\r\n                            </Typography>\r\n                        </Box>\r\n                        {/* order products */}\r\n                        <Box mt={4}>\r\n                            <Typography variant=\"h6\">Order Products</Typography>\r\n                            <Divider />\r\n                            <List component=\"nav\" className={classes.root} aria-label=\"mailbox folders\">\r\n                                {Object.values(order.products).map((product: any, index: number, products: any[]) => {\r\n                                    return (\r\n                                        <div key={product.id}>\r\n                                            <ListItem button>\r\n                                                <ListItemText primary={product.name} />\r\n                                                <div>{product.option_selected || product.custom_message}</div>\r\n                                            </ListItem>\r\n                                            {index < products.length - 1 && <Divider />}\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                            </List>\r\n                        </Box>\r\n                        {/* order status */}\r\n                        <FormControl required error={!!formErrors['status']} variant=\"outlined\" fullWidth margin=\"normal\">\r\n                            <InputLabel ref={inputLabel} id=\"status-select-label\" htmlFor=\"outlined-status-native-simple\">\r\n                                Order Status\r\n                        </InputLabel>\r\n                            <Select\r\n                                required\r\n                                value={statusSelected}\r\n                                onChange={(e: any) => setStatusSelected(e.target.value)}\r\n                                labelId=\"status-select-label\"\r\n                                labelWidth={labelWidth}\r\n                                inputProps={{\r\n                                    name: 'status',\r\n                                    id: 'outlined-status-native-simple',\r\n                                }}\r\n                            >\r\n                                {statusOptions}\r\n                            </Select>\r\n                            <FormHelperText>Select an order status.</FormHelperText>\r\n                        </FormControl>\r\n\r\n                        {/* delivery time */}\r\n                        <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                            <TimePicker autoOk label=\"Delivery Time\" value={deliveryDate} required margin=\"normal\" onChange={setDeliveryDate} inputVariant=\"outlined\"\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton>\r\n                                                <Event />\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                        </MuiPickersUtilsProvider>\r\n                        <Box my={4}>\r\n                            <GoogleMap\r\n                                style={mapStyles}\r\n                                bootstrapURLKeys={{ key: mapApiKey }}\r\n                                center={userLocation ? { lat: userLocation.lat, lng: userLocation.lng } : defaultLocation}\r\n                                zoom={14}\r\n                            >\r\n                                {\r\n                                    userLocation &&\r\n                                    <Marker\r\n                                        title={'Current Location'}\r\n                                        lat={userLocation.lat}\r\n                                        lng={userLocation.lng}\r\n                                    />\r\n                                }\r\n                            </GoogleMap>\r\n                        </Box>\r\n                    </>\r\n                }\r\n                {/* form submit button */}\r\n                <Button\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.submit}\r\n                // disabled={disableSaveButton()}\r\n                >\r\n                    Save\r\n                </Button>\r\n\r\n                {/* loader */}\r\n                {loading && <CircularProgress />}\r\n\r\n                {/* error / success messages */}\r\n                <Box mb={2}>\r\n                    {success ? <Alert variant=\"outlined\" severity=\"success\" children={'Changes saved.'} /> : null}\r\n\r\n                    {\r\n                        errors ? errors.map((e: string, index: number) => (\r\n                            <Box mb={2} key={index}><Alert variant=\"outlined\" severity=\"error\" children={e} /></Box>\r\n                        )) : null\r\n                    }\r\n                </Box>\r\n            </form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n    return {\r\n        order: state.order.adminOrder,\r\n        success: state.order.adminSubmitSuccess,\r\n        errors: state.order.adminSubmitError\r\n    }\r\n}\r\n\r\nconst mapDispatch = {\r\n    submitForm: submitAdminOrderEditFormAction,\r\n    getOrder: getAdminOrdersAction,\r\n    clearSubmitOutcome: clearSubmitAdminOrderEditOutcomeAction\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatch\r\n)(EditOrderForm)","import React from \"react\"\r\nimport { connect } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n// material ui components\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Container from '@material-ui/core/Container'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n// redux actions\r\nimport { login as loginActionCreator } from './../store/features/user/userFeatures'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    avatar: {\r\n        margin: `${theme.spacing(1)}px auto`,\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    pageIconWrap: {\r\n        textAlign: 'center'\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\ninterface formErrors {\r\n    username: string | null,\r\n    password: string | null,\r\n}\r\n\r\nfunction LoginForm({ login }: any) {\r\n    const classes = useStyles()\r\n    const history = useHistory()\r\n\r\n    let formErrorsState = {\r\n        username: null,\r\n        password: null,\r\n    }\r\n\r\n    // component state\r\n    const [formErrors, setFormErrors] = React.useState<formErrors>(formErrorsState)\r\n    // form submission loading indicator\r\n    const [loading, setLoading] = React.useState<boolean>(false)\r\n    const [password, setPassword] = React.useState<string>('')\r\n    const [username, setUsername] = React.useState<string>('')\r\n\r\n    function handleSubmit(event: any) {\r\n        event.preventDefault()\r\n        if (loading) {\r\n            return\r\n        }\r\n        setLoading(true)\r\n        let loginData = {\r\n            username,\r\n            password\r\n        }\r\n        login({ loginData, history })\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"sm\">\r\n            <Box className={classes.pageIconWrap}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Sign In\r\n                </Typography>\r\n            </Box>\r\n            <form className={classes.form} onSubmit={(e) => handleSubmit(e)}>\r\n                {/* Username */}\r\n                <TextField\r\n                    error={!!formErrors['username']}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"username\"\r\n                    label=\"Username\"\r\n                    name=\"username\"\r\n                    autoComplete=\"off\"\r\n                    value={username}\r\n                    onChange={(event) => setUsername(event?.target.value)}\r\n                />\r\n                {!username && <FormHelperText>Enter your username.</FormHelperText>}\r\n\r\n                {/* Password */}\r\n                <TextField\r\n                    error={!!formErrors['password']}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"password\"\r\n                    type=\"password\"\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    autoComplete=\"off\"\r\n                    value={password}\r\n                    onChange={(event) => setPassword(event?.target.value)}\r\n                />\r\n                {!password && <FormHelperText>Enter your password.</FormHelperText>}\r\n\r\n                {/* form submit button */}\r\n                <Button\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.submit}\r\n                // disabled={disableSaveButton()}\r\n                >\r\n                    Login\r\n                </Button>\r\n\r\n                {/* loader */}\r\n                {loading && <CircularProgress />}\r\n            </form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst mapDispatch = {\r\n    login: loginActionCreator\r\n}\r\n\r\nexport default connect(\r\n    undefined,\r\n    mapDispatch\r\n)(LoginForm)","import React from \"react\"\r\nimport { connect } from 'react-redux'\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\n// material ui components\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Container from '@material-ui/core/Container'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { submitProductOptionAction, getProductOptionAction, setProductOptionAction, clearSubmitProductOptionOutcomeAction } from \"../store/features/productOption\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        textAlign: 'center'\r\n    },\r\n    form: {\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\ninterface formErrors {\r\n    optionName: string | null,\r\n}\r\n\r\ninterface formPayload {\r\n    name: string,\r\n    id?: string\r\n}\r\n\r\nfunction ProductOptionForm({ productOption, success, errors, setProductOption, getProductOption, submitForm, clearSubmitOutcome }: any) {\r\n    const classes = useStyles()\r\n    let { id } = useParams()\r\n    let history = useHistory()\r\n\r\n    // effects\r\n    let formErrorsState = {\r\n        optionName: null\r\n    }\r\n\r\n    // component state\r\n    const [formErrors, setFormErrors] = React.useState<formErrors>(formErrorsState)\r\n    // form submission loading indicator\r\n    const [loading, setLoading] = React.useState<boolean>(false)\r\n    const [optionId, setOptionId] = React.useState<string | undefined>(undefined)\r\n    const [optionName, setOptionName] = React.useState<string>('')\r\n\r\n    // effects\r\n    React.useEffect(() => {\r\n        return () => {\r\n            // clear redux store product option data\r\n            setProductOption(null)\r\n            clearSubmitOutcome()\r\n        }\r\n    }, [])\r\n\r\n    // id effect\r\n    React.useEffect(() => {\r\n        // fetch product option if we don't have it\r\n        if (id) {\r\n            setOptionId(id)\r\n            if (!productOption) {\r\n                getProductOption({ id })\r\n            }\r\n        }\r\n        if (!id) {\r\n            setOptionId(undefined)\r\n            // clear store product option data\r\n            setProductOption(null)\r\n            clearSubmitOutcome()\r\n        }\r\n    }, [id])\r\n\r\n    // product option data model effect\r\n    React.useEffect(() => {\r\n        if (productOption) {\r\n            setOptionName(productOption.name)\r\n        }\r\n        return () => {\r\n            setOptionName('')\r\n        }\r\n    }, [productOption])\r\n\r\n    // clear stale success/error messages when loading a new request\r\n    React.useEffect(() => {\r\n        if (loading) {\r\n            clearSubmitOutcome()\r\n        }\r\n    }, [loading])\r\n\r\n    // turn off loading when a form submission response is received\r\n    React.useEffect(() => {\r\n        if (success && success.id) {\r\n            // if we received a created model id navigate to edit with id\r\n            history.push(`/admin/productOption/edit/${success.id}`)\r\n        }\r\n        return () => {\r\n            setLoading(false)\r\n        }\r\n    }, [success, errors])\r\n\r\n\r\n\r\n    function handleSubmit(event: any) {\r\n        event.preventDefault()\r\n        if (loading) {\r\n            return\r\n        }\r\n        setLoading(true)\r\n        let formData = {\r\n            name: optionName\r\n        } as formPayload\r\n\r\n        if (optionId) {\r\n            formData.id = optionId\r\n        }\r\n\r\n        submitForm(formData)\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"sm\" className={classes.root}>\r\n            <Typography component=\"h1\" variant=\"h3\">{optionId ? 'Edit' : 'Create'} Product Option</Typography>\r\n            <form className={classes.form} onSubmit={(e) => handleSubmit(e)}>\r\n                {/* Option Name */}\r\n                <TextField\r\n                    error={!!formErrors['optionName']}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"optionName\"\r\n                    label=\"Option Name\"\r\n                    name=\"optionName\"\r\n                    autoComplete=\"off\"\r\n                    value={optionName}\r\n                    onChange={(event) => setOptionName(event?.target.value)}\r\n                />\r\n                {!optionName && <FormHelperText>Enter an option name.</FormHelperText>}\r\n\r\n                {/* form submit button */}\r\n                <Button\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.submit}\r\n                // disabled={disableSaveButton()}\r\n                >\r\n                    Save\r\n                </Button>\r\n\r\n                {/* loader */}\r\n                {loading && <CircularProgress />}\r\n\r\n                {/* error / success messages */}\r\n                <Box mb={2}>\r\n                    {success ? <Alert variant=\"outlined\" severity=\"success\" children={'Changes saved.'} /> : null}\r\n\r\n                    {\r\n                        errors ? errors.map((e: string, index: number) => (\r\n                            <Box mb={2} key={index}><Alert variant=\"outlined\" severity=\"error\" children={e} /></Box>\r\n                        )) : null\r\n                    }\r\n                </Box>\r\n            </form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n    return {\r\n        productOption: state.productOption.productOption,\r\n        success: state.productOption.submitSuccess,\r\n        errors: state.productOption.submitError\r\n    }\r\n}\r\n\r\nconst mapDispatch = {\r\n    setProductOption: setProductOptionAction,\r\n    submitForm: submitProductOptionAction,\r\n    getProductOption: getProductOptionAction,\r\n    clearSubmitOutcome: clearSubmitProductOptionOutcomeAction\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatch\r\n)(ProductOptionForm)","import React from \"react\"\r\nimport { connect } from 'react-redux'\r\n\r\n// material ui components\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Container from '@material-ui/core/Container'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormHelperText from '@material-ui/core/FormHelperText'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MuiPhoneNumber from 'material-ui-phone-number'\r\n\r\nimport ImageUploader from '@ivancaceres/react-images-upload'\r\nimport { submitRegisterFormAction, clearRegisterSubmitOutcomeAction } from \"../store/features/system\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    avatar: {\r\n        margin: `${theme.spacing(1)}px auto`,\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    pageIconWrap: {\r\n        textAlign: 'center'\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\ninterface formErrors {\r\n    username: string | null,\r\n    password: string | null,\r\n    confirmPassword: string | null,\r\n    referralCode: string | null,\r\n    phoneNumber: string | null,\r\n}\r\n\r\ninterface formPayload {\r\n    username: string,\r\n    password: string,\r\n    password_confirmation: string,\r\n    referral_code: string,\r\n    phone: string\r\n}\r\n\r\nfunction RegistrationForm({ submitForm, success, errors, clearSubmitOutcome }: any) {\r\n    const classes = useStyles()\r\n    let formErrorsState = {\r\n        username: null,\r\n        password: null,\r\n        confirmPassword: null,\r\n        referralCode: null,\r\n        phoneNumber: null\r\n    }\r\n    // component state\r\n    const [confirmPassword, setConfirmPassword] = React.useState<string>('')\r\n    const [formErrors, setFormErrors] = React.useState<formErrors>(formErrorsState)\r\n    // form submission loading indicator\r\n    const [loading, setLoading] = React.useState<boolean>(false)\r\n    const [password, setPassword] = React.useState<string>('')\r\n    const [phoneNumber, setPhoneNumber] = React.useState<string>('')\r\n    const [referralCode, setReferralCode] = React.useState<string>('')\r\n    const [username, setUsername] = React.useState<string>('')\r\n\r\n    // effects\r\n\r\n    // on component unmount clear submission outcome store data\r\n    React.useEffect(() => {\r\n        return () => {\r\n            // clear redux store registerSubmitOutcome data\r\n            clearSubmitOutcome()\r\n        }\r\n    }, [])\r\n\r\n    // clear stale success/error messages when loading a new request\r\n    React.useEffect(() => {\r\n        if (loading) {\r\n            clearSubmitOutcome()\r\n        }\r\n    }, [loading])\r\n\r\n    // turn off loading when a form submission response is received\r\n    React.useEffect(() => {\r\n        // if registration successful clear current form\r\n        if (success) {\r\n            setUsername('')\r\n            setPassword('')\r\n            setConfirmPassword('')\r\n            setPhoneNumber('')\r\n            setReferralCode('')\r\n            setFormErrors(formErrorsState)\r\n        }\r\n        return () => {\r\n            setLoading(false)\r\n        }\r\n    }, [success, errors])\r\n\r\n    function phoneNumberChange(value: string) {\r\n        setPhoneNumber(value)\r\n    }\r\n\r\n    function handleSubmit(event: any) {\r\n        event.preventDefault()\r\n        if (loading) {\r\n            return\r\n        }\r\n        setLoading(true)\r\n\r\n        let formData = {\r\n            username,\r\n            password,\r\n            password_confirmation: confirmPassword,\r\n            phone: phoneNumber,\r\n            referral_code: referralCode,\r\n        } as formPayload\r\n\r\n        submitForm(formData)\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"sm\">\r\n            <Box className={classes.pageIconWrap}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Register\r\n                </Typography>\r\n            </Box>\r\n            <form className={classes.form} onSubmit={(e) => handleSubmit(e)}>\r\n                {/* Username */}\r\n                <TextField\r\n                    error={!!formErrors['username']}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"username\"\r\n                    label=\"Username\"\r\n                    name=\"username\"\r\n                    autoComplete=\"off\"\r\n                    value={username}\r\n                    onChange={(event) => setUsername(event?.target.value)}\r\n                />\r\n                {!username && <FormHelperText>A username is required.</FormHelperText>}\r\n\r\n                {/* Password */}\r\n                <TextField\r\n                    error={!!formErrors['password']}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"password\"\r\n                    label=\"Password\"\r\n                    name=\"password\"\r\n                    autoComplete=\"off\"\r\n                    value={password}\r\n                    onChange={(event) => setPassword(event?.target.value)}\r\n                />\r\n                {!password && <FormHelperText>A password is required.</FormHelperText>}\r\n\r\n                {/* Confirm Password */}\r\n                <TextField\r\n                    error={!!formErrors['confirmPassword']}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"confirmPassword\"\r\n                    label=\"Confirm Password\"\r\n                    name=\"confirmPassword\"\r\n                    autoComplete=\"off\"\r\n                    value={confirmPassword}\r\n                    onChange={(event) => setConfirmPassword(event?.target.value)}\r\n                />\r\n                {!confirmPassword && <FormHelperText>You must confirm the password entered.</FormHelperText>}\r\n\r\n                {/* Phone Number */}\r\n                <MuiPhoneNumber\r\n                    defaultCountry={'us'}\r\n                    disableDropdown\r\n                    variant=\"outlined\"\r\n                    required\r\n                    margin=\"normal\"\r\n                    error={!!formErrors['phoneNumber']}\r\n                    label=\"Phone Number\"\r\n                    value={phoneNumber}\r\n                    onChange={phoneNumberChange}\r\n                    countryCodeEditable={false}\r\n                />\r\n                {phoneNumber.length < 16 && <FormHelperText>You must provide a valid phone number.</FormHelperText>}\r\n\r\n                {/* Referral Code */}\r\n                <TextField\r\n                    error={!!formErrors['referralCode']}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"referralCode\"\r\n                    label=\"Referral Code\"\r\n                    name=\"referralCode\"\r\n                    autoComplete=\"off\"\r\n                    value={referralCode}\r\n                    onChange={(event) => setReferralCode(event?.target.value)}\r\n                />\r\n                {!referralCode && <FormHelperText>A valid referral code is required.</FormHelperText>}\r\n\r\n                {/* form submit button */}\r\n                <Button\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.submit}\r\n                >\r\n                    Register\r\n                </Button>\r\n\r\n                {/* loader */}\r\n                {loading && <CircularProgress />}\r\n\r\n                {/* error / success messages */}\r\n                <Box mb={2}>\r\n                    {success ? <Alert variant=\"outlined\" severity=\"success\" children={'User account successfully registered.'} /> : null}\r\n\r\n                    {\r\n                        errors ? errors.map((e: string, index: number) => (\r\n                            <Box mb={2} key={index}><Alert variant=\"outlined\" severity=\"error\" children={e} /></Box>\r\n                        )) : null\r\n                    }\r\n                </Box>\r\n            </form>\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n    return {\r\n        success: state.system.registerSubmitSuccess,\r\n        errors: state.system.registerSubmitError\r\n    }\r\n}\r\n\r\nconst mapDispatch = {\r\n    submitForm: submitRegisterFormAction,\r\n    clearSubmitOutcome: clearRegisterSubmitOutcomeAction\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatch\r\n)(RegistrationForm)","import React, { useEffect, useState } from \"react\"\r\nimport { connect } from 'react-redux'\r\nimport { getCategoryAction } from \"../store/features/category\";\r\nimport Link from '@material-ui/core/Link';\r\nimport Table from '../components/Table';\r\nimport Container from '@material-ui/core/Container'\r\nimport { useParams, Link as RouterLink } from 'react-router-dom';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        textAlign: 'center'\r\n    },\r\n    title: {\r\n        marginBottom: theme.spacing(3)\r\n    }\r\n}))\r\n\r\nfunction ViewCategories({ getCategory, categories }: any) {\r\n    let classes = useStyles()\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(15);\r\n    const [queryParams, setQueryParams] = useState<any>({\r\n        per_page: rowsPerPage,\r\n        page: 1\r\n    });\r\n\r\n    useEffect(() => {\r\n        getCategory({ queryParams })\r\n    }, [queryParams])\r\n\r\n    function handleRowsPerPageChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n        setRowsPerPage(parseInt(event.target.value))\r\n        setQueryParams({\r\n            ...queryParams,\r\n            page: 1,\r\n            per_page: parseInt(event.target.value)\r\n        })\r\n        setPage(0)\r\n    }\r\n\r\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n        // 0 based page index\r\n        setPage(newPage);\r\n        setQueryParams({\r\n            ...queryParams,\r\n            page: newPage + 1\r\n        })\r\n    };\r\n\r\n    let columns: any[] = [\r\n        {\r\n            key: 'id',\r\n            header: 'Id',\r\n            renderFn: (rowData: any) => {\r\n                return (\r\n                    <Link component={RouterLink} to={`/admin/category/edit/${rowData.id}`}>{rowData.id}</Link>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            key: 'name',\r\n            header: 'Name',\r\n            renderFn: (rowData: any) => {\r\n                return (\r\n                    <Link component={RouterLink} to={`/admin/category/edit/${rowData.id}`}>{rowData.name}</Link>\r\n                )\r\n            }\r\n        }\r\n    ]\r\n\r\n    let tableRender\r\n    if (categories) {\r\n        tableRender = <Table columns={columns} data={categories.data} count={categories.total} rowsPerPage={rowsPerPage} onChangeRowsPerPage={handleRowsPerPageChange} onChangePage={handleChangePage} page={page} />\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"lg\" className={classes.root}>\r\n            <Typography component=\"h1\" variant=\"h3\" className={classes.title}>View Categories</Typography>\r\n            {tableRender}\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n    return {\r\n        categories: state.category.categories\r\n    }\r\n}\r\n\r\nconst mapDispatch = {\r\n    getCategory: getCategoryAction\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatch\r\n)(ViewCategories)","import React, { useEffect, useState } from \"react\"\r\nimport { connect } from 'react-redux'\r\nimport { getProductAction } from './../store/features/product'\r\nimport Link from '@material-ui/core/Link';\r\nimport Table from '../components/Table';\r\nimport Container from '@material-ui/core/Container'\r\nimport { useParams, Link as RouterLink } from 'react-router-dom';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        textAlign: 'center'\r\n    },\r\n    title: {\r\n        marginBottom: theme.spacing(3)\r\n    }\r\n}))\r\n\r\nfunction ViewProducts({ getProducts, products }: any) {\r\n    let classes = useStyles()\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(15);\r\n    const [queryParams, setQueryParams] = useState<any>({\r\n        per_page: rowsPerPage,\r\n        page: 1\r\n    });\r\n\r\n    useEffect(() => {\r\n        getProducts({ queryParams })\r\n    }, [queryParams])\r\n\r\n    function handleRowsPerPageChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n        setRowsPerPage(parseInt(event.target.value))\r\n        setQueryParams({\r\n            ...queryParams,\r\n            page: 1,\r\n            per_page: parseInt(event.target.value)\r\n        })\r\n        setPage(0)\r\n    }\r\n\r\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n        // 0 based page index\r\n        setPage(newPage);\r\n        setQueryParams({\r\n            ...queryParams,\r\n            page: newPage + 1\r\n        })\r\n    };\r\n\r\n    let columns: any[] = [\r\n        {\r\n            key: 'id',\r\n            header: 'Id',\r\n            renderFn: (rowData: any) => {\r\n                return (\r\n                    <Link component={RouterLink} to={`/admin/product/edit/${rowData.id}`}>{rowData.id}</Link>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            key: 'name',\r\n            header: 'Name',\r\n            renderFn: (rowData: any) => {\r\n                return (\r\n                    <Link component={RouterLink} to={`/admin/product/edit/${rowData.id}`}>{rowData.name}</Link>\r\n                )\r\n            }\r\n        }\r\n    ]\r\n\r\n    let tableRender\r\n    if (products) {\r\n        tableRender = <Table columns={columns} data={products.data} count={products.total} rowsPerPage={rowsPerPage} onChangeRowsPerPage={handleRowsPerPageChange} onChangePage={handleChangePage} page={page} />\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"lg\" className={classes.root}>\r\n            <Typography component=\"h1\" variant=\"h3\" className={classes.title}>View Products</Typography>\r\n            {tableRender}\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n    return {\r\n        products: state.product.products\r\n    }\r\n}\r\n\r\nconst mapDispatch = {\r\n    getProducts: getProductAction\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatch\r\n)(ViewProducts)","import React, { useEffect, useState } from \"react\"\r\nimport { connect } from 'react-redux'\r\nimport { getProductOptionAction } from './../store/features/productOption'\r\nimport Link from '@material-ui/core/Link';\r\nimport Table from '../components/Table';\r\nimport Container from '@material-ui/core/Container'\r\nimport { useParams, Link as RouterLink } from 'react-router-dom';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        textAlign: 'center'\r\n    },\r\n    title: {\r\n        marginBottom: theme.spacing(3)\r\n    }\r\n}))\r\n\r\nfunction ViewProductOptions({ getProductOptions, productOptions }: any) {\r\n    let classes = useStyles()\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(15);\r\n    const [queryParams, setQueryParams] = useState<any>({\r\n        per_page: rowsPerPage,\r\n        page: 1\r\n    });\r\n\r\n    useEffect(() => {\r\n        getProductOptions({ queryParams })\r\n    }, [queryParams])\r\n\r\n    function handleRowsPerPageChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n        setRowsPerPage(parseInt(event.target.value))\r\n        setQueryParams({\r\n            ...queryParams,\r\n            page: 1,\r\n            per_page: parseInt(event.target.value)\r\n        })\r\n        setPage(0)\r\n    }\r\n\r\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n        // 0 based page index\r\n        setPage(newPage);\r\n        setQueryParams({\r\n            ...queryParams,\r\n            page: newPage + 1\r\n        })\r\n    };\r\n\r\n    let columns: any[] = [\r\n        {\r\n            key: 'id',\r\n            header: 'Id',\r\n            renderFn: (rowData: any) => {\r\n                return (\r\n                    <Link component={RouterLink} to={`/admin/productOption/edit/${rowData.id}`}>{rowData.id}</Link>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            key: 'name',\r\n            header: 'Name',\r\n            renderFn: (rowData: any) => {\r\n                return (\r\n                    <Link component={RouterLink} to={`/admin/productOption/edit/${rowData.id}`}>{rowData.name}</Link>\r\n                )\r\n            }\r\n        }\r\n    ]\r\n\r\n    let tableRender\r\n    if (productOptions) {\r\n        tableRender = <Table columns={columns} data={productOptions.data} count={productOptions.total} rowsPerPage={rowsPerPage} onChangeRowsPerPage={handleRowsPerPageChange} onChangePage={handleChangePage} page={page} />\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"lg\" className={classes.root}>\r\n            <Typography component=\"h1\" variant=\"h3\" className={classes.title}>View Product Options</Typography>\r\n            {tableRender}\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n    return {\r\n        productOptions: state.productOption.productOptions\r\n    }\r\n}\r\n\r\nconst mapDispatch = {\r\n    getProductOptions: getProductOptionAction\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatch\r\n)(ViewProductOptions)","import React, { useEffect, useState } from \"react\"\r\nimport { connect } from 'react-redux'\r\nimport { getFeaturedAction } from '../store/features/featured'\r\nimport Link from '@material-ui/core/Link';\r\nimport Table from './Table';\r\nimport Container from '@material-ui/core/Container'\r\nimport { useParams, Link as RouterLink } from 'react-router-dom';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        textAlign: 'center'\r\n    },\r\n    title: {\r\n        marginBottom: theme.spacing(3)\r\n    }\r\n}))\r\n\r\nfunction ViewProducts({ getFeaturedItems, featuredItems }: any) {\r\n    let classes = useStyles()\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(15);\r\n    const [queryParams, setQueryParams] = useState<any>({\r\n        per_page: rowsPerPage,\r\n        page: 1\r\n    });\r\n\r\n    useEffect(() => {\r\n        getFeaturedItems({ queryParams })\r\n    }, [queryParams])\r\n\r\n    function handleRowsPerPageChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n        setRowsPerPage(parseInt(event.target.value))\r\n        setQueryParams({\r\n            ...queryParams,\r\n            page: 1,\r\n            per_page: parseInt(event.target.value)\r\n        })\r\n        setPage(0)\r\n    }\r\n\r\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n        // 0 based page index\r\n        setPage(newPage);\r\n        setQueryParams({\r\n            ...queryParams,\r\n            page: newPage + 1\r\n        })\r\n    };\r\n\r\n    let columns: any[] = [\r\n        {\r\n            key: 'id',\r\n            header: 'Id',\r\n            renderFn: (rowData: any) => {\r\n                return (\r\n                    <Link component={RouterLink} to={`/admin/featured/edit/${rowData.id}`}>{rowData.id}</Link>\r\n                )\r\n            }\r\n        },\r\n        {\r\n            key: 'title',\r\n            header: 'Title',\r\n            renderFn: (rowData: any) => {\r\n                return (\r\n                    <Link component={RouterLink} to={`/admin/featured/edit/${rowData.id}`}>{rowData.title}</Link>\r\n                )\r\n            }\r\n        }\r\n    ]\r\n\r\n    let tableRender\r\n    if (featuredItems) {\r\n        tableRender = <Table columns={columns} data={featuredItems.data} count={featuredItems.total} rowsPerPage={rowsPerPage} onChangeRowsPerPage={handleRowsPerPageChange} onChangePage={handleChangePage} page={page} />\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"lg\" className={classes.root}>\r\n            <Typography component=\"h1\" variant=\"h3\" className={classes.title}>View Featured Items</Typography>\r\n            {tableRender}\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n    return {\r\n        featuredItems: state.featured.featuredItems\r\n    }\r\n}\r\n\r\nconst mapDispatch = {\r\n    getFeaturedItems: getFeaturedAction\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatch\r\n)(ViewProducts)","import React, { useEffect, useState } from \"react\"\r\nimport { connect } from 'react-redux'\r\nimport { getProductOptionAction } from './../store/features/productOption'\r\nimport Link from '@material-ui/core/Link';\r\nimport Table from '../components/Table';\r\nimport Container from '@material-ui/core/Container'\r\nimport { useParams, Link as RouterLink } from 'react-router-dom';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { getReferralCodeAction } from \"../store/features/referralCode\";\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        textAlign: 'center'\r\n    },\r\n    title: {\r\n        marginBottom: theme.spacing(3)\r\n    }\r\n}))\r\n\r\nfunction ViewReferralCodes({ getReferralCodes, referralCodes }: any) {\r\n    let classes = useStyles()\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(15);\r\n    const [queryParams, setQueryParams] = useState<any>({\r\n        per_page: rowsPerPage,\r\n        page: 1\r\n    });\r\n\r\n    useEffect(() => {\r\n        getReferralCodes({ queryParams })\r\n    }, [queryParams])\r\n\r\n    function handleRowsPerPageChange(event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n        setRowsPerPage(parseInt(event.target.value))\r\n        setQueryParams({\r\n            ...queryParams,\r\n            page: 1,\r\n            per_page: parseInt(event.target.value)\r\n        })\r\n        setPage(0)\r\n    }\r\n\r\n    const handleChangePage = (event: React.MouseEvent<HTMLButtonElement> | null, newPage: number) => {\r\n        // 0 based page index\r\n        setPage(newPage);\r\n        setQueryParams({\r\n            ...queryParams,\r\n            page: newPage + 1\r\n        })\r\n    };\r\n\r\n    let columns: any[] = [\r\n        {\r\n            key: 'id',\r\n            header: 'Id',\r\n            // renderFn: (rowData: any) => {\r\n            //     return (\r\n            //         <Link component={RouterLink} to={`/admin/productOption/edit/${rowData.id}`}>{rowData.id}</Link>\r\n            //     )\r\n            // }\r\n        },\r\n        {\r\n            key: 'code',\r\n            header: 'Code',\r\n            // renderFn: (rowData: any) => {\r\n            //     return (\r\n            //         <Link component={RouterLink} to={`/admin/referralCode/edit/${rowData.id}`}>{rowData.name}</Link>\r\n            //     )\r\n            // }\r\n        },\r\n        {\r\n            key: 'user',\r\n            header: 'User',\r\n            renderFn: (rowData: any) => {\r\n                return (\r\n                    rowData.user ? rowData.user.username : 'None'\r\n                )\r\n            }\r\n        }\r\n    ]\r\n\r\n    let tableRender\r\n    if (referralCodes) {\r\n        tableRender = <Table columns={columns} data={referralCodes.data} count={referralCodes.total} rowsPerPage={rowsPerPage} onChangeRowsPerPage={handleRowsPerPageChange} onChangePage={handleChangePage} page={page} />\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"lg\" className={classes.root}>\r\n            <Typography component=\"h1\" variant=\"h3\" className={classes.title}>View Referral Codes</Typography>\r\n            {tableRender}\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction mapStateToProps(state: any) {\r\n    return {\r\n        referralCodes: state.referralCode.referralCodes\r\n    }\r\n}\r\n\r\nconst mapDispatch = {\r\n    getReferralCodes: getReferralCodeAction\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatch\r\n)(ViewReferralCodes)","import Pusher from 'pusher-js'\r\nimport Echo from 'laravel-echo'\r\nimport { useEffect, useState } from 'react';\r\n\r\nconst useEcho = () => {\r\n    const [echo, setEcho] = useState();\r\n\r\n    let csrf\r\n    // get csrf cookie\r\n    document.cookie.split(';').some(\r\n        (item) => {\r\n            if (item.includes('XSRF-TOKEN=')) {\r\n                // https://stackoverflow.com/questions/44652194/laravel-decryptexception-the-payload-is-invalid\r\n                csrf = decodeURIComponent(item.split('=')[1])\r\n            }\r\n        }\r\n    )\r\n\r\n    useEffect(() => {\r\n        let echoInstance = new Echo({\r\n            broadcaster: 'pusher',\r\n            key: 'b6387fca6a8c16689601',\r\n            cluster: 'us2',\r\n            forceTLS: true,\r\n            auth: {\r\n                headers: {\r\n                    'X-XSRF-TOKEN': csrf,\r\n                },\r\n            }\r\n        });\r\n        setEcho(echoInstance)\r\n        // echoConsumer(echo);\r\n        return () => {\r\n            echoInstance.disconnect()\r\n        }\r\n    }, [])\r\n    return echo\r\n}\r\nexport default useEcho","import React, { useEffect } from \"react\";\nimport { connect } from 'react-redux'\n\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n// layouts\nimport AdminLayout from './Layouts/AdminLayout'\nimport AppLayout from './Layouts/AppLayout'\n\n// page components\nimport AdminDashboard from \"./pages/AdminDashboard\"\nimport AddFeaturedItemForm from \"./components/FeaturedItemsForm\"\nimport AddProductForm from \"./components/AddProductForm\"\nimport CategoryForm from \"./components/CategoryForm\"\nimport Category from \"./pages/Category\";\nimport GenerateReferralCodesForm from './components/GenerateReferralCodesForm'\nimport Home from \"./pages/Home\";\nimport Cart from \"./pages/Cart\";\nimport Order from './pages/Order'\nimport EditOrder from './components/EditOrderForm'\nimport LoginForm from \"./components/LoginForm\"\nimport Product from \"./pages/Product\";\nimport ProductOptionForm from \"./components/ProductOptionForm\";\nimport RegistrationForm from \"./components/RegistrationForm\"\nimport ViewCategories from \"./components/ViewCategories\";\nimport ViewProducts from \"./components/ViewProducts\";\nimport ViewProductOptions from \"./components/ViewProductOptions\";\nimport ViewFeaturedItems from \"./components/ViewFeaturedItems\";\nimport ViewReferralCodes from './components/ViewReferralCodes'\n\nimport useEcho from './hooks/useEcho'\nimport { EchoContext } from './context/echo'\n\nimport { login } from './store/features/user/userFeatures'\nimport ViewOrders from \"./components/ViewOrders\";\n\nconst App: React.FC = ({ login, user }: any) => {\n  const echo = useEcho()\n  // attempt user login\n  useEffect(() => {\n    login()\n  }, [])\n  let adminRoutes\n  if (user && user.admin) {\n    adminRoutes = (\n      <Route path=\"/admin\">\n        <AdminLayout>\n          <Route exact path=\"/admin\">\n            <AdminDashboard />\n          </Route>\n          <Route exact path={[\"/admin/category/edit/:id\", \"/admin/category\"]}>\n            <CategoryForm />\n          </Route>\n          <Route exact path={\"/admin/category/view\"}>\n            <ViewCategories />\n          </Route>\n          <Route exact path={[\"/admin/featured/edit/:id\", \"/admin/featured\"]}>\n            <AddFeaturedItemForm />\n          </Route>\n          <Route exact path={\"/admin/featured/view\"}>\n            <ViewFeaturedItems />\n          </Route>\n          <Route exact path={\"/admin/product/view\"}>\n            <ViewProducts />\n          </Route>\n          <Route exact path={[\"/admin/product/edit/:id\", \"/admin/product\"]}>\n            <AddProductForm />\n          </Route>\n          <Route exact path={\"/admin/productOption/view\"}>\n            <ViewProductOptions />\n          </Route>\n          <Route exact path={[\"/admin/productOption/edit/:id\", \"/admin/productOption\"]}>\n            <ProductOptionForm />\n          </Route>\n          <Route exact path=\"/admin/order/edit/:id\">\n            <EditOrder />\n          </Route>\n          <Route exact path=\"/admin/referral/view\">\n            <ViewReferralCodes />\n          </Route>\n          <Route exact path=\"/admin/referral\">\n            <GenerateReferralCodesForm />\n          </Route>\n        </AdminLayout>\n      </Route>\n    )\n  }\n  return (\n    <EchoContext.Provider value={echo}>\n      <Router>\n        <Switch>\n          {adminRoutes}\n          <AppLayout>\n            < Route path=\"/register\" children={<RegistrationForm />} />\n            <Route path=\"/login\" children={<LoginForm />} />\n            {/* <Route path=\"/product/:productId\" children={<Product />} /> */}\n            {/* <Route path=\"/:category\" children={<Category />} /> */}.\n          <Route exact path=\"/trackOrder\">\n              <Order />\n            </Route>\n            <Route exact path=\"/cart\">\n              <Cart />\n            </Route>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n          </AppLayout>\n        </Switch>\n      </Router >\n    </EchoContext.Provider>\n  );\n};\n\nfunction mapStateToProps(state: any) {\n  return {\n    user: state.user.user,\n  }\n}\n\nconst mapDispatch = {\n  login,\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatch\n)(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n\r\n// login\r\nexport const login = (username, password) => {\r\n    return axios({\r\n        method: 'post',\r\n        url: '/login',\r\n        data: {\r\n            username,\r\n            password\r\n        }\r\n    });\r\n}\r\n\r\nexport const logout = () => {\r\n    return axios({\r\n        method: 'post',\r\n        url: '/logout'\r\n    });\r\n}\r\n\r\nexport const submitRegisterForm = (form) => {\r\n    let url = '/register'\r\n    let method = 'post'\r\n\r\n    return axios({\r\n        method,\r\n        url,\r\n        data: {\r\n            ...form\r\n        }\r\n    });\r\n}\r\n\r\n// home content\r\nexport const getHomeContent = () => {\r\n    // public route\r\n    // gets all home content (featured tiles and products)\r\n    let url = '/api/home'\r\n    return axios({\r\n        method: 'get',\r\n        url\r\n    });\r\n}\r\n\r\n// category\r\nexport const getCategory = (id, queryParams) => {\r\n    // public route\r\n    // gets all categories if no id is provided\r\n    let url = '/api/category'\r\n    if (id) {\r\n        url += `/${id}`\r\n    }\r\n    return axios({\r\n        method: 'get',\r\n        params: queryParams,\r\n        url\r\n    });\r\n}\r\n\r\nexport const submitCategoryForm = (name, id) => {\r\n    let url = '/admin/category'\r\n    let method = 'post'\r\n\r\n    // edit category\r\n    if (id) {\r\n        url += `/${id}`\r\n        method = 'put'\r\n    }\r\n\r\n    return axios({\r\n        method,\r\n        url,\r\n        data: {\r\n            name,\r\n        }\r\n    });\r\n}\r\n\r\n// product option\r\nexport const getProductOption = (id, queryParams) => {\r\n    // public route\r\n    // gets all product options if no id is provided\r\n    let url = '/api/productOption'\r\n    if (id) {\r\n        url += `/${id}`\r\n    }\r\n    return axios({\r\n        method: 'get',\r\n        params: queryParams,\r\n        url\r\n    });\r\n}\r\n\r\n\r\nexport const submitProductOptionForm = (name, id) => {\r\n    let url = '/admin/productOption'\r\n    let method = 'post'\r\n\r\n    // edit productOption\r\n    if (id) {\r\n        url += `/${id}`\r\n        method = 'put'\r\n    }\r\n\r\n    return axios({\r\n        method,\r\n        url,\r\n        data: {\r\n            name,\r\n        }\r\n    });\r\n}\r\n\r\n// featured\r\nexport const getFeatured = (id, queryParams) => {\r\n    // public route\r\n    // gets all featured items if no id is provided\r\n    let url = '/api/featuredItem'\r\n    if (id) {\r\n        url += `/${id}`\r\n    }\r\n    return axios({\r\n        method: 'get',\r\n        params: queryParams,\r\n        url\r\n    });\r\n}\r\n\r\nexport const submitFeaturedForm = (form) => {\r\n    let method = 'post'\r\n    let url = '/admin/featuredItem'\r\n\r\n    // setup request FormData\r\n    let formData = new FormData();\r\n    if (form.id) {\r\n        // add put field to FormData, allows laravel to spoof and detect PUT request\r\n        formData.set('_method', 'PUT')\r\n        url += `/${form.id}`\r\n    }\r\n\r\n    for (const [key, val] of Object.entries(form)) {\r\n        formData.set(key, val)\r\n    }\r\n\r\n    return axios({\r\n        method,\r\n        url,\r\n        data: formData\r\n    })\r\n}\r\n\r\n// product\r\nexport const getProduct = (id, queryParams) => {\r\n    // public route\r\n    // gets all products if no id is provided\r\n    let url = '/api/product'\r\n    if (id) {\r\n        url += `/${id}`\r\n    }\r\n    return axios({\r\n        method: 'get',\r\n        params: queryParams,\r\n        url\r\n    });\r\n}\r\n\r\nexport const submitProductForm = (form) => {\r\n    let method = 'post'\r\n    let url = '/admin/product'\r\n\r\n    // setup request FormData\r\n    let formData = new FormData();\r\n    if (form.id) {\r\n        // add put field to FormData\r\n        formData.set('_method', 'PUT')\r\n        url += `/${form.id}`\r\n    }\r\n\r\n\r\n\r\n    for (const [key, val] of Object.entries(form)) {\r\n        if (key === 'category_id' || key === 'product_option_id') {\r\n            for (const id of val) {\r\n                let keyName = [key, '[]'].join('');\r\n                formData.append(keyName, id);\r\n            }\r\n        } else {\r\n            formData.set(key, val)\r\n        }\r\n    }\r\n\r\n    return axios({\r\n        method,\r\n        url,\r\n        data: formData\r\n    })\r\n}\r\n\r\n// referral code\r\nexport const getReferralCode = (queryParams) => {\r\n    // private admine route\r\n    // gets all referral codes\r\n    let url = '/admin/referralCode'\r\n\r\n    return axios({\r\n        method: 'get',\r\n        params: queryParams,\r\n        url\r\n    });\r\n}\r\n\r\n\r\nexport const submitReferralCodeForm = (quantity) => {\r\n    let url = '/admin/referralCode'\r\n    let method = 'post'\r\n\r\n    return axios({\r\n        method,\r\n        url,\r\n        data: {\r\n            quantity,\r\n        }\r\n    });\r\n}\r\n\r\n// order\r\nexport const getAdminOrders = (id) => {\r\n    let url = '/admin/orders'\r\n\r\n    if (id) {\r\n        url += `/${id}`\r\n    }\r\n\r\n    return axios({\r\n        method: 'get',\r\n        url\r\n    });\r\n}\r\n\r\n\r\nexport const getOrder = () => {\r\n    let url = '/order'\r\n    return axios({\r\n        method: 'get',\r\n        url\r\n    });\r\n}\r\n\r\nexport const submitAdminOrderEdit = (form) => {\r\n    let method = 'put'\r\n    let url = '/admin/orders'\r\n\r\n    url += `/${form.id}`\r\n\r\n    return axios({\r\n        method,\r\n        url,\r\n        data: form\r\n    })\r\n}\r\n\r\nexport const submitOrder = (form) => {\r\n    let method = 'post'\r\n    let url = '/order'\r\n\r\n    return axios({\r\n        method,\r\n        url,\r\n        data: form\r\n    })\r\n}","import { take, call, put, cancelled, takeEvery } from 'redux-saga/effects'\r\nimport { login, logout, submitRegisterForm } from './../../providers/Api'\r\nimport { login as loginActionCreator, logout as logoutActionCreator, setUser } from './../features/user/userFeatures'\r\nimport { setRegisterSubmitOutcomeAction, submitRegisterFormAction } from './../features/system'\r\n\r\nfunction* authorize({ payload }) {\r\n    try {\r\n        if (!payload) {\r\n            payload = {}\r\n        }\r\n        let { loginData, history } = payload\r\n        if (!loginData) {\r\n            loginData = {}\r\n        }\r\n        const { username, password } = loginData\r\n        const authResp = yield call(login, username, password)\r\n        // let token = authResp.data.access_token\r\n        // yield localStorage.setItem('token', token);\r\n        if (history) {\r\n            history.push('/')\r\n        }\r\n        yield put(setUser(authResp.data))\r\n        // return token\r\n    } catch (error) {\r\n        console.error(error)\r\n        yield put({ type: 'LOGIN_ERROR', error })\r\n    } finally {\r\n        if (yield cancelled()) {\r\n            // ... put special cancellation handling code here\r\n        }\r\n    }\r\n}\r\n\r\nfunction* logoutSaga({ payload }) {\r\n    try {\r\n        const authResp = yield call(logout, { token: payload.token })\r\n        yield localStorage.removeItem('token');\r\n        payload.history.push('/')\r\n    } catch (error) {\r\n        yield put({ type: 'LOGOUT_ERROR', error })\r\n    } finally {\r\n        if (yield cancelled()) {\r\n            // ... put special cancellation handling code here\r\n        }\r\n    }\r\n}\r\n\r\nfunction* submitRegisterFormSaga({ payload }) {\r\n    try {\r\n        const res = yield call(submitRegisterForm, payload)\r\n        let success = true\r\n        yield put(setRegisterSubmitOutcomeAction({ success }))\r\n    } catch (error) {\r\n        console.error(error)\r\n        // grab all error messages\r\n        let errors = []\r\n        if (error.response.data) {\r\n            if (error.response.data.message) {\r\n                errors.push(error.response.data.message)\r\n            }\r\n            if (error.response.data.errors) {\r\n                // loop through errors object\r\n                // loop through error messages for each field\r\n                for (const fieldErrors of Object.values(error.response.data.errors)) {\r\n                    errors.push(...fieldErrors)\r\n                }\r\n            }\r\n        }\r\n\r\n        if (errors.length === 0) {\r\n            errors.push('Error submitting registration form.')\r\n        }\r\n        yield put(setRegisterSubmitOutcomeAction({ errors }))\r\n    }\r\n}\r\n\r\n\r\n// export function* checkToken() {\r\n//     const token = yield localStorage.getItem('token');\r\n//     yield put(cacheToken(token))\r\n// }\r\n\r\nexport function* watchSubmitRegisterForm() {\r\n    yield takeEvery(submitRegisterFormAction.toString(), submitRegisterFormSaga)\r\n}\r\n\r\nexport default function* watchLogin() {\r\n    yield takeEvery(loginActionCreator.toString(), authorize)\r\n}\r\n\r\nexport function* watchLogout() {\r\n    yield takeEvery(logoutActionCreator.toString(), logoutSaga)\r\n}","import { call, put, takeEvery } from 'redux-saga/effects'\r\nimport { submitCategoryFormAction, setSubmitCategoryFormOutcome, getCategoryAction, setCategoryAction, setCategoriesAction } from './../features/category'\r\nimport {\r\n    getHomeContent,\r\n    getCategory,\r\n    getProduct,\r\n    getProductOption,\r\n    getReferralCode,\r\n    submitCategoryForm,\r\n    getFeatured,\r\n    submitFeaturedForm,\r\n    submitProductForm,\r\n    submitProductOptionForm,\r\n    submitReferralCodeForm,\r\n    submitOrder,\r\n    getOrder,\r\n    getAdminOrders,\r\n    submitAdminOrderEdit\r\n} from './../../providers/Api'\r\nimport { submitProductAction, setSubmitProductOutcomeAction, getProductAction, setProductAction, setProductsAction } from '../features/product'\r\nimport { setFeaturedAction, setFeaturedItemsAction, setSubmitFeaturedOutcomeAction, submitFeaturedAction, getFeaturedAction } from './../features/featured'\r\nimport { submitProductOptionAction, setSubmitProductOptionOutcomeAction, getProductOptionAction, setProductOptionAction, setProductOptionsAction } from '../features/productOption'\r\nimport { setReferralCodesAction, setSubmitReferralCodeFormOutcomeAction, submitReferralCodeFormAction, getReferralCodeAction } from './../features/referralCode'\r\nimport {\r\n    setHomeFeaturedAction,\r\n    getHomeContentAction,\r\n    setHomeProductsAction\r\n} from './../features/system'\r\nimport { submitOrderAction, setSubmitOrderOutcomeAction } from '../features/cart'\r\n\r\nimport { getOrderAction, setOrderAction, setOrdersAction, getAdminOrdersAction, setAdminOrderAction, setSubmitAdminOrderEditOutcomeAction, submitAdminOrderEditFormAction } from '../features/order'\r\n\r\n\r\n// get home content\r\nfunction* getHomeContentSaga({ payload }) {\r\n    try {\r\n        const res = yield call(getHomeContent)\r\n        if (res.data) {\r\n            if (res.data.featured) {\r\n                yield put(setHomeFeaturedAction(res.data.featured))\r\n            }\r\n            if (res.data.products) {\r\n                yield put(setHomeProductsAction(res.data.products))\r\n            }\r\n        }\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\n// category\r\nfunction* getCategorySaga({ payload }) {\r\n    try {\r\n        const { id, queryParams } = payload\r\n        const res = yield call(getCategory, id, queryParams)\r\n        if (id) {\r\n            yield put(setCategoryAction(res.data))\r\n        } else {\r\n            yield put(setCategoriesAction(res.data))\r\n        }\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nfunction* submitCategoryFormSaga({ payload }) {\r\n    try {\r\n        const { name, id } = payload\r\n        const res = yield call(submitCategoryForm, name, id)\r\n        let success = true\r\n        if (res.data) {\r\n            success = res.data\r\n            yield put(setCategoryAction(res.data))\r\n        }\r\n        yield put(setSubmitCategoryFormOutcome({ success }))\r\n    } catch (error) {\r\n        console.error(error)\r\n        // grab all error messages\r\n        let errors = []\r\n        if (error.response.data) {\r\n            if (error.response.data.message) {\r\n                errors.push(error.response.data.message)\r\n            }\r\n            if (error.response.data.errors) {\r\n                // loop through errors object\r\n                // loop through error messages for each field\r\n                for (const fieldErrors of Object.values(error.response.data.errors)) {\r\n                    errors.push(...fieldErrors)\r\n                }\r\n            }\r\n        }\r\n\r\n        if (errors.length === 0) {\r\n            errors.push('Error submitting category form.')\r\n        }\r\n        yield put(setSubmitCategoryFormOutcome({ errors }))\r\n    }\r\n}\r\n\r\n// productOption\r\nfunction* getProductOptionSaga({ payload }) {\r\n    try {\r\n        const { id, queryParams } = payload\r\n        const res = yield call(getProductOption, id, queryParams)\r\n        if (id) {\r\n            yield put(setProductOptionAction(res.data))\r\n        } else {\r\n            yield put(setProductOptionsAction(res.data))\r\n        }\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nfunction* submitProductOptionSaga({ payload }) {\r\n    try {\r\n        const { name, id } = payload\r\n        const res = yield call(submitProductOptionForm, name, id)\r\n        let success = true\r\n        if (res.data) {\r\n            success = res.data\r\n            yield put(setProductOptionAction(res.data))\r\n        }\r\n        yield put(setSubmitProductOptionOutcomeAction({ success }))\r\n    } catch (error) {\r\n        console.error(error)\r\n        // grab all error messages\r\n        let errors = []\r\n        if (error.response.data) {\r\n            if (error.response.data.message) {\r\n                errors.push(error.response.data.message)\r\n            }\r\n            if (error.response.data.errors) {\r\n                // loop through errors object\r\n                // loop through error messages for each field\r\n                for (const fieldErrors of Object.values(error.response.data.errors)) {\r\n                    errors.push(...fieldErrors)\r\n                }\r\n            }\r\n        }\r\n\r\n        if (errors.length === 0) {\r\n            errors.push('Error submitting product option form.')\r\n        }\r\n        yield put(setSubmitProductOptionOutcomeAction({ errors }))\r\n    }\r\n}\r\n\r\n// featured item\r\nfunction* getFeaturedSaga({ payload }) {\r\n    try {\r\n        const { id, queryParams } = payload\r\n        const res = yield call(getFeatured, id, queryParams)\r\n        if (id) {\r\n            yield put(setFeaturedAction(res.data))\r\n        } else {\r\n            yield put(setFeaturedItemsAction(res.data))\r\n        }\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nfunction* submitFeaturedSaga({ payload }) {\r\n    try {\r\n        const res = yield call(submitFeaturedForm, payload)\r\n        let success = true\r\n        if (res.data) {\r\n            success = res.data\r\n            yield put(setFeaturedAction(res.data))\r\n        }\r\n        yield put(setSubmitFeaturedOutcomeAction({ success }))\r\n    } catch (error) {\r\n        console.error(error)\r\n        // grab all error messages\r\n        let errors = []\r\n        if (error.response.data) {\r\n            if (error.response.data.message) {\r\n                errors.push(error.response.data.message)\r\n            }\r\n            if (error.response.data.errors) {\r\n                // loop through errors object\r\n                // loop through error messages for each field\r\n                for (const fieldErrors of Object.values(error.response.data.errors)) {\r\n                    errors.push(...fieldErrors)\r\n                }\r\n            }\r\n        }\r\n\r\n        if (errors.length === 0) {\r\n            errors.push('Error submitting product form.')\r\n        }\r\n        yield put(setSubmitFeaturedOutcomeAction({ errors }))\r\n    }\r\n}\r\n\r\n\r\n// product\r\nfunction* getProductSaga({ payload }) {\r\n    try {\r\n        const { id, queryParams } = payload\r\n        const res = yield call(getProduct, id, queryParams)\r\n        if (id) {\r\n            yield put(setProductAction(res.data))\r\n        } else {\r\n            yield put(setProductsAction(res.data))\r\n        }\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nfunction* submitProductSaga({ payload }) {\r\n    try {\r\n        const res = yield call(submitProductForm, payload)\r\n        let success = true\r\n        if (res.data) {\r\n            success = res.data\r\n            yield put(setProductAction(res.data))\r\n        }\r\n        yield put(setSubmitProductOutcomeAction({ success }))\r\n    } catch (error) {\r\n        console.error(error)\r\n        // grab all error messages\r\n        let errors = []\r\n        if (error.response.data) {\r\n            if (error.response.data.message) {\r\n                errors.push(error.response.data.message)\r\n            }\r\n            if (error.response.data.errors) {\r\n                // loop through errors object\r\n                // loop through error messages for each field\r\n                for (const fieldErrors of Object.values(error.response.data.errors)) {\r\n                    errors.push(...fieldErrors)\r\n                }\r\n            }\r\n        }\r\n\r\n        if (errors.length === 0) {\r\n            errors.push('Error submitting product form.')\r\n        }\r\n        yield put(setSubmitProductOutcomeAction({ errors }))\r\n    }\r\n}\r\n\r\n// referral code\r\nfunction* getReferralCodeSaga({ payload }) {\r\n    try {\r\n        const { queryParams } = payload\r\n        const res = yield call(getReferralCode, queryParams)\r\n\r\n        yield put(setReferralCodesAction(res.data))\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nfunction* submitReferralCodeFormSaga({ payload }) {\r\n    try {\r\n        const { quantity } = payload\r\n        const res = yield call(submitReferralCodeForm, quantity)\r\n        let success = true\r\n        if (res.data) {\r\n            success = res.data\r\n        }\r\n        yield put(setSubmitReferralCodeFormOutcomeAction({ success }))\r\n    } catch (error) {\r\n        console.error(error)\r\n        // grab all error messages\r\n        let errors = []\r\n        if (error.response.data) {\r\n            if (error.response.data.message) {\r\n                errors.push(error.response.data.message)\r\n            }\r\n            if (error.response.data.errors) {\r\n                // loop through errors object\r\n                // loop through error messages for each field\r\n                for (const fieldErrors of Object.values(error.response.data.errors)) {\r\n                    errors.push(...fieldErrors)\r\n                }\r\n            }\r\n        }\r\n\r\n        if (errors.length === 0) {\r\n            errors.push('Error submitting referral code form.')\r\n        }\r\n        yield put(setSubmitReferralCodeFormOutcomeAction({ errors }))\r\n    }\r\n}\r\n\r\n// order\r\nfunction* getOrdersAdminSaga({ payload }) {\r\n    if (!payload) {\r\n        let payload = {}\r\n    }\r\n    try {\r\n        const { id } = payload\r\n        const res = yield call(getAdminOrders, id)\r\n        if (id) {\r\n            yield put(setAdminOrderAction(res.data))\r\n        } else {\r\n            yield put(setOrdersAction(res.data))\r\n        }\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nfunction* getOrderSaga({ payload }) {\r\n    try {\r\n        const res = yield call(getOrder)\r\n        yield put(setOrderAction(res.data))\r\n    } catch (error) {\r\n        console.error(error)\r\n    }\r\n}\r\n\r\nfunction* submitAdminOrderEditSaga({ payload }) {\r\n    try {\r\n        const res = yield call(submitAdminOrderEdit, payload)\r\n        let success = true\r\n        // if (res.data) {\r\n        // success = res.data\r\n        // yield put(setProductAction(res.data))\r\n        // }\r\n        yield put(setSubmitAdminOrderEditOutcomeAction({ success }))\r\n    } catch (error) {\r\n        console.error(error)\r\n        // grab all error messages\r\n        let errors = []\r\n        if (error.response.data) {\r\n            if (error.response.data.message) {\r\n                errors.push(error.response.data.message)\r\n            }\r\n            if (error.response.data.errors) {\r\n                // loop through errors object\r\n                // loop through error messages for each field\r\n                for (const fieldErrors of Object.values(error.response.data.errors)) {\r\n                    errors.push(...fieldErrors)\r\n                }\r\n            }\r\n        }\r\n\r\n        if (errors.length === 0) {\r\n            errors.push('Error submitting product form.')\r\n        }\r\n        yield put(setSubmitAdminOrderEditOutcomeAction({ errors }))\r\n    }\r\n}\r\n\r\nfunction* submitOrderSaga({ payload }) {\r\n    try {\r\n        const res = yield call(submitOrder, payload)\r\n        let success = true\r\n        // if (res.data) {\r\n        // success = res.data\r\n        // yield put(setProductAction(res.data))\r\n        // }\r\n        yield put(setSubmitOrderOutcomeAction({ success }))\r\n    } catch (error) {\r\n        console.error(error)\r\n        // grab all error messages\r\n        let errors = []\r\n        if (error.response.data) {\r\n            if (error.response.data.message) {\r\n                errors.push(error.response.data.message)\r\n            }\r\n            if (error.response.data.errors) {\r\n                // loop through errors object\r\n                // loop through error messages for each field\r\n                for (const fieldErrors of Object.values(error.response.data.errors)) {\r\n                    errors.push(...fieldErrors)\r\n                }\r\n            }\r\n        }\r\n\r\n        if (errors.length === 0) {\r\n            errors.push('Error submitting product form.')\r\n        }\r\n        yield put(setSubmitOrderOutcomeAction({ errors }))\r\n    }\r\n}\r\n\r\n// watchers\r\nexport function* watchGetHomeContent() {\r\n    yield takeEvery(getHomeContentAction.toString(), getHomeContentSaga)\r\n}\r\n\r\nexport function* watchGetCategory() {\r\n    yield takeEvery(getCategoryAction.toString(), getCategorySaga)\r\n}\r\n\r\nexport function* watchGetFeatured() {\r\n    yield takeEvery(getFeaturedAction.toString(), getFeaturedSaga)\r\n}\r\n\r\nexport function* watchGetProduct() {\r\n    yield takeEvery(getProductAction.toString(), getProductSaga)\r\n}\r\n\r\nexport function* watchGetProductOption() {\r\n    yield takeEvery(getProductOptionAction.toString(), getProductOptionSaga)\r\n}\r\n\r\nexport function* watchGetReferralCode() {\r\n    yield takeEvery(getReferralCodeAction.toString(), getReferralCodeSaga)\r\n}\r\n\r\nexport function* watchGetOrder() {\r\n    yield takeEvery(getOrderAction.toString(), getOrderSaga)\r\n}\r\n\r\nexport function* watchGetOrdersAdmin() {\r\n    yield takeEvery(getAdminOrdersAction.toString(), getOrdersAdminSaga)\r\n}\r\n\r\nexport function* watchSubmitAdminOrderEdit() {\r\n    yield takeEvery(submitAdminOrderEditFormAction.toString(), submitAdminOrderEditSaga)\r\n}\r\n\r\n\r\nexport function* watchSubmitOrder() {\r\n    yield takeEvery(submitOrderAction.toString(), submitOrderSaga)\r\n}\r\n\r\nexport function* watchSubmitReferralCodeForm() {\r\n    yield takeEvery(submitReferralCodeFormAction.toString(), submitReferralCodeFormSaga)\r\n}\r\n\r\nexport function* watchSubmitCategoryForm() {\r\n    yield takeEvery(submitCategoryFormAction.toString(), submitCategoryFormSaga)\r\n}\r\n\r\nexport function* watchSubmitFeaturedForm() {\r\n    yield takeEvery(submitFeaturedAction.toString(), submitFeaturedSaga)\r\n}\r\n\r\nexport function* watchSubmitProductForm() {\r\n    yield takeEvery(submitProductAction.toString(), submitProductSaga)\r\n}\r\n\r\nexport function* watchSubmitProductOptionForm() {\r\n    yield takeEvery(submitProductOptionAction.toString(), submitProductOptionSaga)\r\n}","import { configureStore, getDefaultMiddleware, combineReducers } from '@reduxjs/toolkit'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { fork } from 'redux-saga/effects'\r\nimport userReducer from './features/user/userFeatures'\r\nimport { categoryReducer } from './features/category'\r\nimport { reducer as productReducer } from './features/product'\r\nimport { reducer as featuredReducer } from './features/featured'\r\nimport { reducer as productOptionReducer } from './features/productOption'\r\nimport { reducer as referralCodeReducer } from './features/referralCode'\r\nimport { reducer as cartReducer } from './features/cart'\r\nimport { reducer as orderReducer } from './features/order'\r\nimport { systemReducer } from './features/system'\r\nimport watchLoginSaga, { checkToken, watchLogout, watchSubmitRegisterForm } from './sagas/login'\r\nimport {\r\n    watchSubmitCategoryForm,\r\n    watchGetFeatured,\r\n    watchGetCategory,\r\n    watchGetProduct,\r\n    watchGetProductOption,\r\n    watchSubmitFeaturedForm,\r\n    watchSubmitProductForm,\r\n    watchSubmitProductOptionForm,\r\n    watchSubmitReferralCodeForm,\r\n    watchGetReferralCode,\r\n    watchGetHomeContent,\r\n    watchSubmitOrder,\r\n    watchGetOrder,\r\n    watchGetOrdersAdmin,\r\n    watchSubmitAdminOrderEdit\r\n} from './sagas/api'\r\n\r\nconst reducer = combineReducers({\r\n    user: userReducer,\r\n    category: categoryReducer,\r\n    featured: featuredReducer,\r\n    product: productReducer,\r\n    productOption: productOptionReducer,\r\n    referralCode: referralCodeReducer,\r\n    system: systemReducer,\r\n    cart: cartReducer,\r\n    order: orderReducer\r\n})\r\n\r\nexport default function* rootSaga() {\r\n    // yield checkToken()\r\n    yield fork(watchLoginSaga)\r\n    yield fork(watchLogout)\r\n    yield fork(watchGetHomeContent)\r\n    yield fork(watchGetCategory)\r\n    yield fork(watchGetFeatured)\r\n    yield fork(watchGetProduct)\r\n    yield fork(watchGetProductOption)\r\n    yield fork(watchGetReferralCode)\r\n    yield fork(watchGetOrder)\r\n    yield fork(watchGetOrdersAdmin)\r\n    yield fork(watchSubmitAdminOrderEdit)\r\n    yield fork(watchSubmitCategoryForm)\r\n    yield fork(watchSubmitFeaturedForm)\r\n    yield fork(watchSubmitProductForm)\r\n    yield fork(watchSubmitProductOptionForm)\r\n    yield fork(watchSubmitReferralCodeForm)\r\n    yield fork(watchSubmitRegisterForm)\r\n    yield fork(watchSubmitOrder)\r\n}\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\nconst middleware = [...getDefaultMiddleware(), sagaMiddleware]\r\n\r\nexport const store = configureStore({\r\n    reducer,\r\n    middleware,\r\n    devTools: process.env.NODE_ENV !== 'production',\r\n})\r\n\r\nsagaMiddleware.run(rootSaga)\r\n\r\n// The store has been created with these options:\r\n// - The slice reducers were automatically passed to combineReducers()\r\n// - redux-thunk and redux-logger were added as middleware\r\n// - The Redux DevTools Extension is disabled for production\r\n// - The middleware, batch, and devtools enhancers were automatically composed together","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { store } from './store/configureStore'\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nReactDOM.render(\n    <Provider store={store}>\n        <CssBaseline />\n        <App />\n    </Provider>\n    ,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}